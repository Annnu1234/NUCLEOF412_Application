
NUCLEOF412_APPLICATION_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a64  080401c4  080401c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08042c28  08042c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08042c40  08042c40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08042c40  08042c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08042c48  08042c48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08042c48  08042c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08042c4c  08042c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08042c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  2000000c  08042c5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08042c5c  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c42c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2e  00000000  00000000  0002c468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002e098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e837  00000000  00000000  0002f350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc96  00000000  00000000  0004db87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b89c2  00000000  00000000  0005981d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001121df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f8  00000000  00000000  00112230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401c4 <__do_global_dtors_aux>:
 80401c4:	b510      	push	{r4, lr}
 80401c6:	4c05      	ldr	r4, [pc, #20]	; (80401dc <__do_global_dtors_aux+0x18>)
 80401c8:	7823      	ldrb	r3, [r4, #0]
 80401ca:	b933      	cbnz	r3, 80401da <__do_global_dtors_aux+0x16>
 80401cc:	4b04      	ldr	r3, [pc, #16]	; (80401e0 <__do_global_dtors_aux+0x1c>)
 80401ce:	b113      	cbz	r3, 80401d6 <__do_global_dtors_aux+0x12>
 80401d0:	4804      	ldr	r0, [pc, #16]	; (80401e4 <__do_global_dtors_aux+0x20>)
 80401d2:	f3af 8000 	nop.w
 80401d6:	2301      	movs	r3, #1
 80401d8:	7023      	strb	r3, [r4, #0]
 80401da:	bd10      	pop	{r4, pc}
 80401dc:	2000000c 	.word	0x2000000c
 80401e0:	00000000 	.word	0x00000000
 80401e4:	08042c10 	.word	0x08042c10

080401e8 <frame_dummy>:
 80401e8:	b508      	push	{r3, lr}
 80401ea:	4b03      	ldr	r3, [pc, #12]	; (80401f8 <frame_dummy+0x10>)
 80401ec:	b11b      	cbz	r3, 80401f6 <frame_dummy+0xe>
 80401ee:	4903      	ldr	r1, [pc, #12]	; (80401fc <frame_dummy+0x14>)
 80401f0:	4803      	ldr	r0, [pc, #12]	; (8040200 <frame_dummy+0x18>)
 80401f2:	f3af 8000 	nop.w
 80401f6:	bd08      	pop	{r3, pc}
 80401f8:	00000000 	.word	0x00000000
 80401fc:	20000010 	.word	0x20000010
 8040200:	08042c10 	.word	0x08042c10

08040204 <__aeabi_uldivmod>:
 8040204:	b953      	cbnz	r3, 804021c <__aeabi_uldivmod+0x18>
 8040206:	b94a      	cbnz	r2, 804021c <__aeabi_uldivmod+0x18>
 8040208:	2900      	cmp	r1, #0
 804020a:	bf08      	it	eq
 804020c:	2800      	cmpeq	r0, #0
 804020e:	bf1c      	itt	ne
 8040210:	f04f 31ff 	movne.w	r1, #4294967295
 8040214:	f04f 30ff 	movne.w	r0, #4294967295
 8040218:	f000 b974 	b.w	8040504 <__aeabi_idiv0>
 804021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8040220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040224:	f000 f806 	bl	8040234 <__udivmoddi4>
 8040228:	f8dd e004 	ldr.w	lr, [sp, #4]
 804022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040230:	b004      	add	sp, #16
 8040232:	4770      	bx	lr

08040234 <__udivmoddi4>:
 8040234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040238:	9d08      	ldr	r5, [sp, #32]
 804023a:	4604      	mov	r4, r0
 804023c:	468e      	mov	lr, r1
 804023e:	2b00      	cmp	r3, #0
 8040240:	d14d      	bne.n	80402de <__udivmoddi4+0xaa>
 8040242:	428a      	cmp	r2, r1
 8040244:	4694      	mov	ip, r2
 8040246:	d969      	bls.n	804031c <__udivmoddi4+0xe8>
 8040248:	fab2 f282 	clz	r2, r2
 804024c:	b152      	cbz	r2, 8040264 <__udivmoddi4+0x30>
 804024e:	fa01 f302 	lsl.w	r3, r1, r2
 8040252:	f1c2 0120 	rsb	r1, r2, #32
 8040256:	fa20 f101 	lsr.w	r1, r0, r1
 804025a:	fa0c fc02 	lsl.w	ip, ip, r2
 804025e:	ea41 0e03 	orr.w	lr, r1, r3
 8040262:	4094      	lsls	r4, r2
 8040264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040268:	0c21      	lsrs	r1, r4, #16
 804026a:	fbbe f6f8 	udiv	r6, lr, r8
 804026e:	fa1f f78c 	uxth.w	r7, ip
 8040272:	fb08 e316 	mls	r3, r8, r6, lr
 8040276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 804027a:	fb06 f107 	mul.w	r1, r6, r7
 804027e:	4299      	cmp	r1, r3
 8040280:	d90a      	bls.n	8040298 <__udivmoddi4+0x64>
 8040282:	eb1c 0303 	adds.w	r3, ip, r3
 8040286:	f106 30ff 	add.w	r0, r6, #4294967295
 804028a:	f080 811f 	bcs.w	80404cc <__udivmoddi4+0x298>
 804028e:	4299      	cmp	r1, r3
 8040290:	f240 811c 	bls.w	80404cc <__udivmoddi4+0x298>
 8040294:	3e02      	subs	r6, #2
 8040296:	4463      	add	r3, ip
 8040298:	1a5b      	subs	r3, r3, r1
 804029a:	b2a4      	uxth	r4, r4
 804029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80402a0:	fb08 3310 	mls	r3, r8, r0, r3
 80402a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80402a8:	fb00 f707 	mul.w	r7, r0, r7
 80402ac:	42a7      	cmp	r7, r4
 80402ae:	d90a      	bls.n	80402c6 <__udivmoddi4+0x92>
 80402b0:	eb1c 0404 	adds.w	r4, ip, r4
 80402b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80402b8:	f080 810a 	bcs.w	80404d0 <__udivmoddi4+0x29c>
 80402bc:	42a7      	cmp	r7, r4
 80402be:	f240 8107 	bls.w	80404d0 <__udivmoddi4+0x29c>
 80402c2:	4464      	add	r4, ip
 80402c4:	3802      	subs	r0, #2
 80402c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80402ca:	1be4      	subs	r4, r4, r7
 80402cc:	2600      	movs	r6, #0
 80402ce:	b11d      	cbz	r5, 80402d8 <__udivmoddi4+0xa4>
 80402d0:	40d4      	lsrs	r4, r2
 80402d2:	2300      	movs	r3, #0
 80402d4:	e9c5 4300 	strd	r4, r3, [r5]
 80402d8:	4631      	mov	r1, r6
 80402da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402de:	428b      	cmp	r3, r1
 80402e0:	d909      	bls.n	80402f6 <__udivmoddi4+0xc2>
 80402e2:	2d00      	cmp	r5, #0
 80402e4:	f000 80ef 	beq.w	80404c6 <__udivmoddi4+0x292>
 80402e8:	2600      	movs	r6, #0
 80402ea:	e9c5 0100 	strd	r0, r1, [r5]
 80402ee:	4630      	mov	r0, r6
 80402f0:	4631      	mov	r1, r6
 80402f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402f6:	fab3 f683 	clz	r6, r3
 80402fa:	2e00      	cmp	r6, #0
 80402fc:	d14a      	bne.n	8040394 <__udivmoddi4+0x160>
 80402fe:	428b      	cmp	r3, r1
 8040300:	d302      	bcc.n	8040308 <__udivmoddi4+0xd4>
 8040302:	4282      	cmp	r2, r0
 8040304:	f200 80f9 	bhi.w	80404fa <__udivmoddi4+0x2c6>
 8040308:	1a84      	subs	r4, r0, r2
 804030a:	eb61 0303 	sbc.w	r3, r1, r3
 804030e:	2001      	movs	r0, #1
 8040310:	469e      	mov	lr, r3
 8040312:	2d00      	cmp	r5, #0
 8040314:	d0e0      	beq.n	80402d8 <__udivmoddi4+0xa4>
 8040316:	e9c5 4e00 	strd	r4, lr, [r5]
 804031a:	e7dd      	b.n	80402d8 <__udivmoddi4+0xa4>
 804031c:	b902      	cbnz	r2, 8040320 <__udivmoddi4+0xec>
 804031e:	deff      	udf	#255	; 0xff
 8040320:	fab2 f282 	clz	r2, r2
 8040324:	2a00      	cmp	r2, #0
 8040326:	f040 8092 	bne.w	804044e <__udivmoddi4+0x21a>
 804032a:	eba1 010c 	sub.w	r1, r1, ip
 804032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040332:	fa1f fe8c 	uxth.w	lr, ip
 8040336:	2601      	movs	r6, #1
 8040338:	0c20      	lsrs	r0, r4, #16
 804033a:	fbb1 f3f7 	udiv	r3, r1, r7
 804033e:	fb07 1113 	mls	r1, r7, r3, r1
 8040342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040346:	fb0e f003 	mul.w	r0, lr, r3
 804034a:	4288      	cmp	r0, r1
 804034c:	d908      	bls.n	8040360 <__udivmoddi4+0x12c>
 804034e:	eb1c 0101 	adds.w	r1, ip, r1
 8040352:	f103 38ff 	add.w	r8, r3, #4294967295
 8040356:	d202      	bcs.n	804035e <__udivmoddi4+0x12a>
 8040358:	4288      	cmp	r0, r1
 804035a:	f200 80cb 	bhi.w	80404f4 <__udivmoddi4+0x2c0>
 804035e:	4643      	mov	r3, r8
 8040360:	1a09      	subs	r1, r1, r0
 8040362:	b2a4      	uxth	r4, r4
 8040364:	fbb1 f0f7 	udiv	r0, r1, r7
 8040368:	fb07 1110 	mls	r1, r7, r0, r1
 804036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8040370:	fb0e fe00 	mul.w	lr, lr, r0
 8040374:	45a6      	cmp	lr, r4
 8040376:	d908      	bls.n	804038a <__udivmoddi4+0x156>
 8040378:	eb1c 0404 	adds.w	r4, ip, r4
 804037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8040380:	d202      	bcs.n	8040388 <__udivmoddi4+0x154>
 8040382:	45a6      	cmp	lr, r4
 8040384:	f200 80bb 	bhi.w	80404fe <__udivmoddi4+0x2ca>
 8040388:	4608      	mov	r0, r1
 804038a:	eba4 040e 	sub.w	r4, r4, lr
 804038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8040392:	e79c      	b.n	80402ce <__udivmoddi4+0x9a>
 8040394:	f1c6 0720 	rsb	r7, r6, #32
 8040398:	40b3      	lsls	r3, r6
 804039a:	fa22 fc07 	lsr.w	ip, r2, r7
 804039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80403a2:	fa20 f407 	lsr.w	r4, r0, r7
 80403a6:	fa01 f306 	lsl.w	r3, r1, r6
 80403aa:	431c      	orrs	r4, r3
 80403ac:	40f9      	lsrs	r1, r7
 80403ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80403b2:	fa00 f306 	lsl.w	r3, r0, r6
 80403b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80403ba:	0c20      	lsrs	r0, r4, #16
 80403bc:	fa1f fe8c 	uxth.w	lr, ip
 80403c0:	fb09 1118 	mls	r1, r9, r8, r1
 80403c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403c8:	fb08 f00e 	mul.w	r0, r8, lr
 80403cc:	4288      	cmp	r0, r1
 80403ce:	fa02 f206 	lsl.w	r2, r2, r6
 80403d2:	d90b      	bls.n	80403ec <__udivmoddi4+0x1b8>
 80403d4:	eb1c 0101 	adds.w	r1, ip, r1
 80403d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80403dc:	f080 8088 	bcs.w	80404f0 <__udivmoddi4+0x2bc>
 80403e0:	4288      	cmp	r0, r1
 80403e2:	f240 8085 	bls.w	80404f0 <__udivmoddi4+0x2bc>
 80403e6:	f1a8 0802 	sub.w	r8, r8, #2
 80403ea:	4461      	add	r1, ip
 80403ec:	1a09      	subs	r1, r1, r0
 80403ee:	b2a4      	uxth	r4, r4
 80403f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80403f4:	fb09 1110 	mls	r1, r9, r0, r1
 80403f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80403fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8040400:	458e      	cmp	lr, r1
 8040402:	d908      	bls.n	8040416 <__udivmoddi4+0x1e2>
 8040404:	eb1c 0101 	adds.w	r1, ip, r1
 8040408:	f100 34ff 	add.w	r4, r0, #4294967295
 804040c:	d26c      	bcs.n	80404e8 <__udivmoddi4+0x2b4>
 804040e:	458e      	cmp	lr, r1
 8040410:	d96a      	bls.n	80404e8 <__udivmoddi4+0x2b4>
 8040412:	3802      	subs	r0, #2
 8040414:	4461      	add	r1, ip
 8040416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 804041a:	fba0 9402 	umull	r9, r4, r0, r2
 804041e:	eba1 010e 	sub.w	r1, r1, lr
 8040422:	42a1      	cmp	r1, r4
 8040424:	46c8      	mov	r8, r9
 8040426:	46a6      	mov	lr, r4
 8040428:	d356      	bcc.n	80404d8 <__udivmoddi4+0x2a4>
 804042a:	d053      	beq.n	80404d4 <__udivmoddi4+0x2a0>
 804042c:	b15d      	cbz	r5, 8040446 <__udivmoddi4+0x212>
 804042e:	ebb3 0208 	subs.w	r2, r3, r8
 8040432:	eb61 010e 	sbc.w	r1, r1, lr
 8040436:	fa01 f707 	lsl.w	r7, r1, r7
 804043a:	fa22 f306 	lsr.w	r3, r2, r6
 804043e:	40f1      	lsrs	r1, r6
 8040440:	431f      	orrs	r7, r3
 8040442:	e9c5 7100 	strd	r7, r1, [r5]
 8040446:	2600      	movs	r6, #0
 8040448:	4631      	mov	r1, r6
 804044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804044e:	f1c2 0320 	rsb	r3, r2, #32
 8040452:	40d8      	lsrs	r0, r3
 8040454:	fa0c fc02 	lsl.w	ip, ip, r2
 8040458:	fa21 f303 	lsr.w	r3, r1, r3
 804045c:	4091      	lsls	r1, r2
 804045e:	4301      	orrs	r1, r0
 8040460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040464:	fa1f fe8c 	uxth.w	lr, ip
 8040468:	fbb3 f0f7 	udiv	r0, r3, r7
 804046c:	fb07 3610 	mls	r6, r7, r0, r3
 8040470:	0c0b      	lsrs	r3, r1, #16
 8040472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040476:	fb00 f60e 	mul.w	r6, r0, lr
 804047a:	429e      	cmp	r6, r3
 804047c:	fa04 f402 	lsl.w	r4, r4, r2
 8040480:	d908      	bls.n	8040494 <__udivmoddi4+0x260>
 8040482:	eb1c 0303 	adds.w	r3, ip, r3
 8040486:	f100 38ff 	add.w	r8, r0, #4294967295
 804048a:	d22f      	bcs.n	80404ec <__udivmoddi4+0x2b8>
 804048c:	429e      	cmp	r6, r3
 804048e:	d92d      	bls.n	80404ec <__udivmoddi4+0x2b8>
 8040490:	3802      	subs	r0, #2
 8040492:	4463      	add	r3, ip
 8040494:	1b9b      	subs	r3, r3, r6
 8040496:	b289      	uxth	r1, r1
 8040498:	fbb3 f6f7 	udiv	r6, r3, r7
 804049c:	fb07 3316 	mls	r3, r7, r6, r3
 80404a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80404a4:	fb06 f30e 	mul.w	r3, r6, lr
 80404a8:	428b      	cmp	r3, r1
 80404aa:	d908      	bls.n	80404be <__udivmoddi4+0x28a>
 80404ac:	eb1c 0101 	adds.w	r1, ip, r1
 80404b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80404b4:	d216      	bcs.n	80404e4 <__udivmoddi4+0x2b0>
 80404b6:	428b      	cmp	r3, r1
 80404b8:	d914      	bls.n	80404e4 <__udivmoddi4+0x2b0>
 80404ba:	3e02      	subs	r6, #2
 80404bc:	4461      	add	r1, ip
 80404be:	1ac9      	subs	r1, r1, r3
 80404c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80404c4:	e738      	b.n	8040338 <__udivmoddi4+0x104>
 80404c6:	462e      	mov	r6, r5
 80404c8:	4628      	mov	r0, r5
 80404ca:	e705      	b.n	80402d8 <__udivmoddi4+0xa4>
 80404cc:	4606      	mov	r6, r0
 80404ce:	e6e3      	b.n	8040298 <__udivmoddi4+0x64>
 80404d0:	4618      	mov	r0, r3
 80404d2:	e6f8      	b.n	80402c6 <__udivmoddi4+0x92>
 80404d4:	454b      	cmp	r3, r9
 80404d6:	d2a9      	bcs.n	804042c <__udivmoddi4+0x1f8>
 80404d8:	ebb9 0802 	subs.w	r8, r9, r2
 80404dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80404e0:	3801      	subs	r0, #1
 80404e2:	e7a3      	b.n	804042c <__udivmoddi4+0x1f8>
 80404e4:	4646      	mov	r6, r8
 80404e6:	e7ea      	b.n	80404be <__udivmoddi4+0x28a>
 80404e8:	4620      	mov	r0, r4
 80404ea:	e794      	b.n	8040416 <__udivmoddi4+0x1e2>
 80404ec:	4640      	mov	r0, r8
 80404ee:	e7d1      	b.n	8040494 <__udivmoddi4+0x260>
 80404f0:	46d0      	mov	r8, sl
 80404f2:	e77b      	b.n	80403ec <__udivmoddi4+0x1b8>
 80404f4:	3b02      	subs	r3, #2
 80404f6:	4461      	add	r1, ip
 80404f8:	e732      	b.n	8040360 <__udivmoddi4+0x12c>
 80404fa:	4630      	mov	r0, r6
 80404fc:	e709      	b.n	8040312 <__udivmoddi4+0xde>
 80404fe:	4464      	add	r4, ip
 8040500:	3802      	subs	r0, #2
 8040502:	e742      	b.n	804038a <__udivmoddi4+0x156>

08040504 <__aeabi_idiv0>:
 8040504:	4770      	bx	lr
 8040506:	bf00      	nop

08040508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040508:	b580      	push	{r7, lr}
 804050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804050c:	f000 fad4 	bl	8040ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040510:	f000 f810 	bl	8040534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040514:	f000 f8d4 	bl	80406c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8040518:	f000 f878 	bl	804060c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 804051c:	f000 f8a0 	bl	8040660 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8040520:	2201      	movs	r2, #1
 8040522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8040526:	4802      	ldr	r0, [pc, #8]	; (8040530 <main+0x28>)
 8040528:	f000 fdd6 	bl	80410d8 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 804052c:	e7fe      	b.n	804052c <main+0x24>
 804052e:	bf00      	nop
 8040530:	40020400 	.word	0x40020400

08040534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040534:	b580      	push	{r7, lr}
 8040536:	b094      	sub	sp, #80	; 0x50
 8040538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804053a:	f107 031c 	add.w	r3, r7, #28
 804053e:	2234      	movs	r2, #52	; 0x34
 8040540:	2100      	movs	r1, #0
 8040542:	4618      	mov	r0, r3
 8040544:	f002 fb5c 	bl	8042c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040548:	f107 0308 	add.w	r3, r7, #8
 804054c:	2200      	movs	r2, #0
 804054e:	601a      	str	r2, [r3, #0]
 8040550:	605a      	str	r2, [r3, #4]
 8040552:	609a      	str	r2, [r3, #8]
 8040554:	60da      	str	r2, [r3, #12]
 8040556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040558:	2300      	movs	r3, #0
 804055a:	607b      	str	r3, [r7, #4]
 804055c:	4b29      	ldr	r3, [pc, #164]	; (8040604 <SystemClock_Config+0xd0>)
 804055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040560:	4a28      	ldr	r2, [pc, #160]	; (8040604 <SystemClock_Config+0xd0>)
 8040562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040566:	6413      	str	r3, [r2, #64]	; 0x40
 8040568:	4b26      	ldr	r3, [pc, #152]	; (8040604 <SystemClock_Config+0xd0>)
 804056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040570:	607b      	str	r3, [r7, #4]
 8040572:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8040574:	2300      	movs	r3, #0
 8040576:	603b      	str	r3, [r7, #0]
 8040578:	4b23      	ldr	r3, [pc, #140]	; (8040608 <SystemClock_Config+0xd4>)
 804057a:	681b      	ldr	r3, [r3, #0]
 804057c:	4a22      	ldr	r2, [pc, #136]	; (8040608 <SystemClock_Config+0xd4>)
 804057e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8040582:	6013      	str	r3, [r2, #0]
 8040584:	4b20      	ldr	r3, [pc, #128]	; (8040608 <SystemClock_Config+0xd4>)
 8040586:	681b      	ldr	r3, [r3, #0]
 8040588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 804058c:	603b      	str	r3, [r7, #0]
 804058e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8040590:	2301      	movs	r3, #1
 8040592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8040594:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8040598:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804059a:	2302      	movs	r3, #2
 804059c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 804059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80405a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80405a4:	2308      	movs	r3, #8
 80405a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80405a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80405ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80405ae:	2304      	movs	r3, #4
 80405b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80405b2:	2308      	movs	r3, #8
 80405b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80405b6:	2302      	movs	r3, #2
 80405b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80405ba:	f107 031c 	add.w	r3, r7, #28
 80405be:	4618      	mov	r0, r3
 80405c0:	f001 fada 	bl	8041b78 <HAL_RCC_OscConfig>
 80405c4:	4603      	mov	r3, r0
 80405c6:	2b00      	cmp	r3, #0
 80405c8:	d001      	beq.n	80405ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80405ca:	f000 f927 	bl	804081c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80405ce:	230f      	movs	r3, #15
 80405d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80405d2:	2302      	movs	r3, #2
 80405d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80405d6:	2300      	movs	r3, #0
 80405d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80405da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80405de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80405e0:	2300      	movs	r3, #0
 80405e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80405e4:	f107 0308 	add.w	r3, r7, #8
 80405e8:	2103      	movs	r1, #3
 80405ea:	4618      	mov	r0, r3
 80405ec:	f000 fed6 	bl	804139c <HAL_RCC_ClockConfig>
 80405f0:	4603      	mov	r3, r0
 80405f2:	2b00      	cmp	r3, #0
 80405f4:	d001      	beq.n	80405fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80405f6:	f000 f911 	bl	804081c <Error_Handler>
  }
}
 80405fa:	bf00      	nop
 80405fc:	3750      	adds	r7, #80	; 0x50
 80405fe:	46bd      	mov	sp, r7
 8040600:	bd80      	pop	{r7, pc}
 8040602:	bf00      	nop
 8040604:	40023800 	.word	0x40023800
 8040608:	40007000 	.word	0x40007000

0804060c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 804060c:	b580      	push	{r7, lr}
 804060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8040610:	4b11      	ldr	r3, [pc, #68]	; (8040658 <MX_USART3_UART_Init+0x4c>)
 8040612:	4a12      	ldr	r2, [pc, #72]	; (804065c <MX_USART3_UART_Init+0x50>)
 8040614:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8040616:	4b10      	ldr	r3, [pc, #64]	; (8040658 <MX_USART3_UART_Init+0x4c>)
 8040618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 804061c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 804061e:	4b0e      	ldr	r3, [pc, #56]	; (8040658 <MX_USART3_UART_Init+0x4c>)
 8040620:	2200      	movs	r2, #0
 8040622:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8040624:	4b0c      	ldr	r3, [pc, #48]	; (8040658 <MX_USART3_UART_Init+0x4c>)
 8040626:	2200      	movs	r2, #0
 8040628:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 804062a:	4b0b      	ldr	r3, [pc, #44]	; (8040658 <MX_USART3_UART_Init+0x4c>)
 804062c:	2200      	movs	r2, #0
 804062e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8040630:	4b09      	ldr	r3, [pc, #36]	; (8040658 <MX_USART3_UART_Init+0x4c>)
 8040632:	220c      	movs	r2, #12
 8040634:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040636:	4b08      	ldr	r3, [pc, #32]	; (8040658 <MX_USART3_UART_Init+0x4c>)
 8040638:	2200      	movs	r2, #0
 804063a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 804063c:	4b06      	ldr	r3, [pc, #24]	; (8040658 <MX_USART3_UART_Init+0x4c>)
 804063e:	2200      	movs	r2, #0
 8040640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8040642:	4805      	ldr	r0, [pc, #20]	; (8040658 <MX_USART3_UART_Init+0x4c>)
 8040644:	f001 fd1c 	bl	8042080 <HAL_UART_Init>
 8040648:	4603      	mov	r3, r0
 804064a:	2b00      	cmp	r3, #0
 804064c:	d001      	beq.n	8040652 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 804064e:	f000 f8e5 	bl	804081c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8040652:	bf00      	nop
 8040654:	bd80      	pop	{r7, pc}
 8040656:	bf00      	nop
 8040658:	20000028 	.word	0x20000028
 804065c:	40004800 	.word	0x40004800

08040660 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8040660:	b580      	push	{r7, lr}
 8040662:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8040664:	4b15      	ldr	r3, [pc, #84]	; (80406bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8040666:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 804066a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 804066c:	4b13      	ldr	r3, [pc, #76]	; (80406bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 804066e:	2206      	movs	r2, #6
 8040670:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8040672:	4b12      	ldr	r3, [pc, #72]	; (80406bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8040674:	2202      	movs	r2, #2
 8040676:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8040678:	4b10      	ldr	r3, [pc, #64]	; (80406bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 804067a:	2200      	movs	r2, #0
 804067c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 804067e:	4b0f      	ldr	r3, [pc, #60]	; (80406bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8040680:	2202      	movs	r2, #2
 8040682:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8040684:	4b0d      	ldr	r3, [pc, #52]	; (80406bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8040686:	2201      	movs	r2, #1
 8040688:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 804068a:	4b0c      	ldr	r3, [pc, #48]	; (80406bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 804068c:	2200      	movs	r2, #0
 804068e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8040690:	4b0a      	ldr	r3, [pc, #40]	; (80406bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8040692:	2200      	movs	r2, #0
 8040694:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8040696:	4b09      	ldr	r3, [pc, #36]	; (80406bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8040698:	2201      	movs	r2, #1
 804069a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 804069c:	4b07      	ldr	r3, [pc, #28]	; (80406bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 804069e:	2201      	movs	r2, #1
 80406a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80406a2:	4b06      	ldr	r3, [pc, #24]	; (80406bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80406a4:	2200      	movs	r2, #0
 80406a6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80406a8:	4804      	ldr	r0, [pc, #16]	; (80406bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80406aa:	f000 fd2e 	bl	804110a <HAL_PCD_Init>
 80406ae:	4603      	mov	r3, r0
 80406b0:	2b00      	cmp	r3, #0
 80406b2:	d001      	beq.n	80406b8 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80406b4:	f000 f8b2 	bl	804081c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80406b8:	bf00      	nop
 80406ba:	bd80      	pop	{r7, pc}
 80406bc:	2000006c 	.word	0x2000006c

080406c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80406c0:	b580      	push	{r7, lr}
 80406c2:	b08c      	sub	sp, #48	; 0x30
 80406c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80406c6:	f107 031c 	add.w	r3, r7, #28
 80406ca:	2200      	movs	r2, #0
 80406cc:	601a      	str	r2, [r3, #0]
 80406ce:	605a      	str	r2, [r3, #4]
 80406d0:	609a      	str	r2, [r3, #8]
 80406d2:	60da      	str	r2, [r3, #12]
 80406d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80406d6:	2300      	movs	r3, #0
 80406d8:	61bb      	str	r3, [r7, #24]
 80406da:	4b4c      	ldr	r3, [pc, #304]	; (804080c <MX_GPIO_Init+0x14c>)
 80406dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80406de:	4a4b      	ldr	r2, [pc, #300]	; (804080c <MX_GPIO_Init+0x14c>)
 80406e0:	f043 0304 	orr.w	r3, r3, #4
 80406e4:	6313      	str	r3, [r2, #48]	; 0x30
 80406e6:	4b49      	ldr	r3, [pc, #292]	; (804080c <MX_GPIO_Init+0x14c>)
 80406e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80406ea:	f003 0304 	and.w	r3, r3, #4
 80406ee:	61bb      	str	r3, [r7, #24]
 80406f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80406f2:	2300      	movs	r3, #0
 80406f4:	617b      	str	r3, [r7, #20]
 80406f6:	4b45      	ldr	r3, [pc, #276]	; (804080c <MX_GPIO_Init+0x14c>)
 80406f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80406fa:	4a44      	ldr	r2, [pc, #272]	; (804080c <MX_GPIO_Init+0x14c>)
 80406fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040700:	6313      	str	r3, [r2, #48]	; 0x30
 8040702:	4b42      	ldr	r3, [pc, #264]	; (804080c <MX_GPIO_Init+0x14c>)
 8040704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804070a:	617b      	str	r3, [r7, #20]
 804070c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804070e:	2300      	movs	r3, #0
 8040710:	613b      	str	r3, [r7, #16]
 8040712:	4b3e      	ldr	r3, [pc, #248]	; (804080c <MX_GPIO_Init+0x14c>)
 8040714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040716:	4a3d      	ldr	r2, [pc, #244]	; (804080c <MX_GPIO_Init+0x14c>)
 8040718:	f043 0302 	orr.w	r3, r3, #2
 804071c:	6313      	str	r3, [r2, #48]	; 0x30
 804071e:	4b3b      	ldr	r3, [pc, #236]	; (804080c <MX_GPIO_Init+0x14c>)
 8040720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040722:	f003 0302 	and.w	r3, r3, #2
 8040726:	613b      	str	r3, [r7, #16]
 8040728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 804072a:	2300      	movs	r3, #0
 804072c:	60fb      	str	r3, [r7, #12]
 804072e:	4b37      	ldr	r3, [pc, #220]	; (804080c <MX_GPIO_Init+0x14c>)
 8040730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040732:	4a36      	ldr	r2, [pc, #216]	; (804080c <MX_GPIO_Init+0x14c>)
 8040734:	f043 0308 	orr.w	r3, r3, #8
 8040738:	6313      	str	r3, [r2, #48]	; 0x30
 804073a:	4b34      	ldr	r3, [pc, #208]	; (804080c <MX_GPIO_Init+0x14c>)
 804073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804073e:	f003 0308 	and.w	r3, r3, #8
 8040742:	60fb      	str	r3, [r7, #12]
 8040744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8040746:	2300      	movs	r3, #0
 8040748:	60bb      	str	r3, [r7, #8]
 804074a:	4b30      	ldr	r3, [pc, #192]	; (804080c <MX_GPIO_Init+0x14c>)
 804074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804074e:	4a2f      	ldr	r2, [pc, #188]	; (804080c <MX_GPIO_Init+0x14c>)
 8040750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040754:	6313      	str	r3, [r2, #48]	; 0x30
 8040756:	4b2d      	ldr	r3, [pc, #180]	; (804080c <MX_GPIO_Init+0x14c>)
 8040758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804075a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804075e:	60bb      	str	r3, [r7, #8]
 8040760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040762:	2300      	movs	r3, #0
 8040764:	607b      	str	r3, [r7, #4]
 8040766:	4b29      	ldr	r3, [pc, #164]	; (804080c <MX_GPIO_Init+0x14c>)
 8040768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804076a:	4a28      	ldr	r2, [pc, #160]	; (804080c <MX_GPIO_Init+0x14c>)
 804076c:	f043 0301 	orr.w	r3, r3, #1
 8040770:	6313      	str	r3, [r2, #48]	; 0x30
 8040772:	4b26      	ldr	r3, [pc, #152]	; (804080c <MX_GPIO_Init+0x14c>)
 8040774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040776:	f003 0301 	and.w	r3, r3, #1
 804077a:	607b      	str	r3, [r7, #4]
 804077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 804077e:	2200      	movs	r2, #0
 8040780:	f244 0181 	movw	r1, #16513	; 0x4081
 8040784:	4822      	ldr	r0, [pc, #136]	; (8040810 <MX_GPIO_Init+0x150>)
 8040786:	f000 fca7 	bl	80410d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 804078a:	2200      	movs	r2, #0
 804078c:	2140      	movs	r1, #64	; 0x40
 804078e:	4821      	ldr	r0, [pc, #132]	; (8040814 <MX_GPIO_Init+0x154>)
 8040790:	f000 fca2 	bl	80410d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8040794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8040798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804079a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 804079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407a0:	2300      	movs	r3, #0
 80407a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80407a4:	f107 031c 	add.w	r3, r7, #28
 80407a8:	4619      	mov	r1, r3
 80407aa:	481b      	ldr	r0, [pc, #108]	; (8040818 <MX_GPIO_Init+0x158>)
 80407ac:	f000 fb00 	bl	8040db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80407b0:	f244 0381 	movw	r3, #16513	; 0x4081
 80407b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80407b6:	2301      	movs	r3, #1
 80407b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407ba:	2300      	movs	r3, #0
 80407bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80407be:	2300      	movs	r3, #0
 80407c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80407c2:	f107 031c 	add.w	r3, r7, #28
 80407c6:	4619      	mov	r1, r3
 80407c8:	4811      	ldr	r0, [pc, #68]	; (8040810 <MX_GPIO_Init+0x150>)
 80407ca:	f000 faf1 	bl	8040db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80407ce:	2340      	movs	r3, #64	; 0x40
 80407d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80407d2:	2301      	movs	r3, #1
 80407d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407d6:	2300      	movs	r3, #0
 80407d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80407da:	2300      	movs	r3, #0
 80407dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80407de:	f107 031c 	add.w	r3, r7, #28
 80407e2:	4619      	mov	r1, r3
 80407e4:	480b      	ldr	r0, [pc, #44]	; (8040814 <MX_GPIO_Init+0x154>)
 80407e6:	f000 fae3 	bl	8040db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80407ea:	2380      	movs	r3, #128	; 0x80
 80407ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80407ee:	2300      	movs	r3, #0
 80407f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407f2:	2300      	movs	r3, #0
 80407f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80407f6:	f107 031c 	add.w	r3, r7, #28
 80407fa:	4619      	mov	r1, r3
 80407fc:	4805      	ldr	r0, [pc, #20]	; (8040814 <MX_GPIO_Init+0x154>)
 80407fe:	f000 fad7 	bl	8040db0 <HAL_GPIO_Init>

}
 8040802:	bf00      	nop
 8040804:	3730      	adds	r7, #48	; 0x30
 8040806:	46bd      	mov	sp, r7
 8040808:	bd80      	pop	{r7, pc}
 804080a:	bf00      	nop
 804080c:	40023800 	.word	0x40023800
 8040810:	40020400 	.word	0x40020400
 8040814:	40021800 	.word	0x40021800
 8040818:	40020800 	.word	0x40020800

0804081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 804081c:	b480      	push	{r7}
 804081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040820:	b672      	cpsid	i
}
 8040822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040824:	e7fe      	b.n	8040824 <Error_Handler+0x8>
	...

08040828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040828:	b480      	push	{r7}
 804082a:	b083      	sub	sp, #12
 804082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804082e:	2300      	movs	r3, #0
 8040830:	607b      	str	r3, [r7, #4]
 8040832:	4b10      	ldr	r3, [pc, #64]	; (8040874 <HAL_MspInit+0x4c>)
 8040834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040836:	4a0f      	ldr	r2, [pc, #60]	; (8040874 <HAL_MspInit+0x4c>)
 8040838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804083c:	6453      	str	r3, [r2, #68]	; 0x44
 804083e:	4b0d      	ldr	r3, [pc, #52]	; (8040874 <HAL_MspInit+0x4c>)
 8040840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040846:	607b      	str	r3, [r7, #4]
 8040848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 804084a:	2300      	movs	r3, #0
 804084c:	603b      	str	r3, [r7, #0]
 804084e:	4b09      	ldr	r3, [pc, #36]	; (8040874 <HAL_MspInit+0x4c>)
 8040850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040852:	4a08      	ldr	r2, [pc, #32]	; (8040874 <HAL_MspInit+0x4c>)
 8040854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040858:	6413      	str	r3, [r2, #64]	; 0x40
 804085a:	4b06      	ldr	r3, [pc, #24]	; (8040874 <HAL_MspInit+0x4c>)
 804085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040862:	603b      	str	r3, [r7, #0]
 8040864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040866:	bf00      	nop
 8040868:	370c      	adds	r7, #12
 804086a:	46bd      	mov	sp, r7
 804086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040870:	4770      	bx	lr
 8040872:	bf00      	nop
 8040874:	40023800 	.word	0x40023800

08040878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040878:	b580      	push	{r7, lr}
 804087a:	b08a      	sub	sp, #40	; 0x28
 804087c:	af00      	add	r7, sp, #0
 804087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040880:	f107 0314 	add.w	r3, r7, #20
 8040884:	2200      	movs	r2, #0
 8040886:	601a      	str	r2, [r3, #0]
 8040888:	605a      	str	r2, [r3, #4]
 804088a:	609a      	str	r2, [r3, #8]
 804088c:	60da      	str	r2, [r3, #12]
 804088e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8040890:	687b      	ldr	r3, [r7, #4]
 8040892:	681b      	ldr	r3, [r3, #0]
 8040894:	4a19      	ldr	r2, [pc, #100]	; (80408fc <HAL_UART_MspInit+0x84>)
 8040896:	4293      	cmp	r3, r2
 8040898:	d12c      	bne.n	80408f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 804089a:	2300      	movs	r3, #0
 804089c:	613b      	str	r3, [r7, #16]
 804089e:	4b18      	ldr	r3, [pc, #96]	; (8040900 <HAL_UART_MspInit+0x88>)
 80408a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80408a2:	4a17      	ldr	r2, [pc, #92]	; (8040900 <HAL_UART_MspInit+0x88>)
 80408a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80408a8:	6413      	str	r3, [r2, #64]	; 0x40
 80408aa:	4b15      	ldr	r3, [pc, #84]	; (8040900 <HAL_UART_MspInit+0x88>)
 80408ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80408ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80408b2:	613b      	str	r3, [r7, #16]
 80408b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80408b6:	2300      	movs	r3, #0
 80408b8:	60fb      	str	r3, [r7, #12]
 80408ba:	4b11      	ldr	r3, [pc, #68]	; (8040900 <HAL_UART_MspInit+0x88>)
 80408bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408be:	4a10      	ldr	r2, [pc, #64]	; (8040900 <HAL_UART_MspInit+0x88>)
 80408c0:	f043 0308 	orr.w	r3, r3, #8
 80408c4:	6313      	str	r3, [r2, #48]	; 0x30
 80408c6:	4b0e      	ldr	r3, [pc, #56]	; (8040900 <HAL_UART_MspInit+0x88>)
 80408c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408ca:	f003 0308 	and.w	r3, r3, #8
 80408ce:	60fb      	str	r3, [r7, #12]
 80408d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80408d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80408d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80408d8:	2302      	movs	r3, #2
 80408da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80408dc:	2300      	movs	r3, #0
 80408de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80408e0:	2303      	movs	r3, #3
 80408e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80408e4:	2307      	movs	r3, #7
 80408e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80408e8:	f107 0314 	add.w	r3, r7, #20
 80408ec:	4619      	mov	r1, r3
 80408ee:	4805      	ldr	r0, [pc, #20]	; (8040904 <HAL_UART_MspInit+0x8c>)
 80408f0:	f000 fa5e 	bl	8040db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80408f4:	bf00      	nop
 80408f6:	3728      	adds	r7, #40	; 0x28
 80408f8:	46bd      	mov	sp, r7
 80408fa:	bd80      	pop	{r7, pc}
 80408fc:	40004800 	.word	0x40004800
 8040900:	40023800 	.word	0x40023800
 8040904:	40020c00 	.word	0x40020c00

08040908 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8040908:	b580      	push	{r7, lr}
 804090a:	b098      	sub	sp, #96	; 0x60
 804090c:	af00      	add	r7, sp, #0
 804090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040910:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8040914:	2200      	movs	r2, #0
 8040916:	601a      	str	r2, [r3, #0]
 8040918:	605a      	str	r2, [r3, #4]
 804091a:	609a      	str	r2, [r3, #8]
 804091c:	60da      	str	r2, [r3, #12]
 804091e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040920:	f107 0310 	add.w	r3, r7, #16
 8040924:	223c      	movs	r2, #60	; 0x3c
 8040926:	2100      	movs	r1, #0
 8040928:	4618      	mov	r0, r3
 804092a:	f002 f969 	bl	8042c00 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 804092e:	687b      	ldr	r3, [r7, #4]
 8040930:	681b      	ldr	r3, [r3, #0]
 8040932:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8040936:	d14d      	bne.n	80409d4 <HAL_PCD_MspInit+0xcc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8040938:	2320      	movs	r3, #32
 804093a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 804093c:	2300      	movs	r3, #0
 804093e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040940:	f107 0310 	add.w	r3, r7, #16
 8040944:	4618      	mov	r0, r3
 8040946:	f000 ff49 	bl	80417dc <HAL_RCCEx_PeriphCLKConfig>
 804094a:	4603      	mov	r3, r0
 804094c:	2b00      	cmp	r3, #0
 804094e:	d001      	beq.n	8040954 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8040950:	f7ff ff64 	bl	804081c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040954:	2300      	movs	r3, #0
 8040956:	60fb      	str	r3, [r7, #12]
 8040958:	4b20      	ldr	r3, [pc, #128]	; (80409dc <HAL_PCD_MspInit+0xd4>)
 804095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804095c:	4a1f      	ldr	r2, [pc, #124]	; (80409dc <HAL_PCD_MspInit+0xd4>)
 804095e:	f043 0301 	orr.w	r3, r3, #1
 8040962:	6313      	str	r3, [r2, #48]	; 0x30
 8040964:	4b1d      	ldr	r3, [pc, #116]	; (80409dc <HAL_PCD_MspInit+0xd4>)
 8040966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040968:	f003 0301 	and.w	r3, r3, #1
 804096c:	60fb      	str	r3, [r7, #12]
 804096e:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8040970:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8040974:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040976:	2302      	movs	r3, #2
 8040978:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804097a:	2300      	movs	r3, #0
 804097c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804097e:	2303      	movs	r3, #3
 8040980:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8040982:	230a      	movs	r3, #10
 8040984:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040986:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 804098a:	4619      	mov	r1, r3
 804098c:	4814      	ldr	r0, [pc, #80]	; (80409e0 <HAL_PCD_MspInit+0xd8>)
 804098e:	f000 fa0f 	bl	8040db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8040992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8040996:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040998:	2300      	movs	r3, #0
 804099a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804099c:	2300      	movs	r3, #0
 804099e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80409a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80409a4:	4619      	mov	r1, r3
 80409a6:	480e      	ldr	r0, [pc, #56]	; (80409e0 <HAL_PCD_MspInit+0xd8>)
 80409a8:	f000 fa02 	bl	8040db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80409ac:	4b0b      	ldr	r3, [pc, #44]	; (80409dc <HAL_PCD_MspInit+0xd4>)
 80409ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80409b0:	4a0a      	ldr	r2, [pc, #40]	; (80409dc <HAL_PCD_MspInit+0xd4>)
 80409b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80409b6:	6353      	str	r3, [r2, #52]	; 0x34
 80409b8:	2300      	movs	r3, #0
 80409ba:	60bb      	str	r3, [r7, #8]
 80409bc:	4b07      	ldr	r3, [pc, #28]	; (80409dc <HAL_PCD_MspInit+0xd4>)
 80409be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80409c0:	4a06      	ldr	r2, [pc, #24]	; (80409dc <HAL_PCD_MspInit+0xd4>)
 80409c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80409c6:	6453      	str	r3, [r2, #68]	; 0x44
 80409c8:	4b04      	ldr	r3, [pc, #16]	; (80409dc <HAL_PCD_MspInit+0xd4>)
 80409ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80409cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80409d0:	60bb      	str	r3, [r7, #8]
 80409d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80409d4:	bf00      	nop
 80409d6:	3760      	adds	r7, #96	; 0x60
 80409d8:	46bd      	mov	sp, r7
 80409da:	bd80      	pop	{r7, pc}
 80409dc:	40023800 	.word	0x40023800
 80409e0:	40020000 	.word	0x40020000

080409e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80409e4:	b480      	push	{r7}
 80409e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80409e8:	e7fe      	b.n	80409e8 <NMI_Handler+0x4>

080409ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80409ea:	b480      	push	{r7}
 80409ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80409ee:	e7fe      	b.n	80409ee <HardFault_Handler+0x4>

080409f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80409f0:	b480      	push	{r7}
 80409f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80409f4:	e7fe      	b.n	80409f4 <MemManage_Handler+0x4>

080409f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80409f6:	b480      	push	{r7}
 80409f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80409fa:	e7fe      	b.n	80409fa <BusFault_Handler+0x4>

080409fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80409fc:	b480      	push	{r7}
 80409fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040a00:	e7fe      	b.n	8040a00 <UsageFault_Handler+0x4>

08040a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040a02:	b480      	push	{r7}
 8040a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040a06:	bf00      	nop
 8040a08:	46bd      	mov	sp, r7
 8040a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a0e:	4770      	bx	lr

08040a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040a10:	b480      	push	{r7}
 8040a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040a14:	bf00      	nop
 8040a16:	46bd      	mov	sp, r7
 8040a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a1c:	4770      	bx	lr

08040a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040a1e:	b480      	push	{r7}
 8040a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040a22:	bf00      	nop
 8040a24:	46bd      	mov	sp, r7
 8040a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a2a:	4770      	bx	lr

08040a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040a2c:	b580      	push	{r7, lr}
 8040a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040a30:	f000 f894 	bl	8040b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040a34:	bf00      	nop
 8040a36:	bd80      	pop	{r7, pc}

08040a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040a38:	b480      	push	{r7}
 8040a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040a3c:	4b07      	ldr	r3, [pc, #28]	; (8040a5c <SystemInit+0x24>)
 8040a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040a42:	4a06      	ldr	r2, [pc, #24]	; (8040a5c <SystemInit+0x24>)
 8040a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8040a4c:	4b03      	ldr	r3, [pc, #12]	; (8040a5c <SystemInit+0x24>)
 8040a4e:	4a04      	ldr	r2, [pc, #16]	; (8040a60 <SystemInit+0x28>)
 8040a50:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8040a52:	bf00      	nop
 8040a54:	46bd      	mov	sp, r7
 8040a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a5a:	4770      	bx	lr
 8040a5c:	e000ed00 	.word	0xe000ed00
 8040a60:	08040000 	.word	0x08040000

08040a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8040a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040a9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040a68:	480d      	ldr	r0, [pc, #52]	; (8040aa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8040a6a:	490e      	ldr	r1, [pc, #56]	; (8040aa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8040a6c:	4a0e      	ldr	r2, [pc, #56]	; (8040aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8040a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040a70:	e002      	b.n	8040a78 <LoopCopyDataInit>

08040a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040a76:	3304      	adds	r3, #4

08040a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040a7c:	d3f9      	bcc.n	8040a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040a7e:	4a0b      	ldr	r2, [pc, #44]	; (8040aac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8040a80:	4c0b      	ldr	r4, [pc, #44]	; (8040ab0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8040a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040a84:	e001      	b.n	8040a8a <LoopFillZerobss>

08040a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040a88:	3204      	adds	r2, #4

08040a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040a8c:	d3fb      	bcc.n	8040a86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8040a8e:	f7ff ffd3 	bl	8040a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8040a92:	f002 f891 	bl	8042bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040a96:	f7ff fd37 	bl	8040508 <main>
  bx  lr    
 8040a9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8040a9c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8040aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8040aa4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8040aa8:	08042c50 	.word	0x08042c50
  ldr r2, =_sbss
 8040aac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8040ab0:	20000478 	.word	0x20000478

08040ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040ab4:	e7fe      	b.n	8040ab4 <ADC_IRQHandler>
	...

08040ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040ab8:	b580      	push	{r7, lr}
 8040aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8040abc:	4b0e      	ldr	r3, [pc, #56]	; (8040af8 <HAL_Init+0x40>)
 8040abe:	681b      	ldr	r3, [r3, #0]
 8040ac0:	4a0d      	ldr	r2, [pc, #52]	; (8040af8 <HAL_Init+0x40>)
 8040ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8040ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8040ac8:	4b0b      	ldr	r3, [pc, #44]	; (8040af8 <HAL_Init+0x40>)
 8040aca:	681b      	ldr	r3, [r3, #0]
 8040acc:	4a0a      	ldr	r2, [pc, #40]	; (8040af8 <HAL_Init+0x40>)
 8040ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8040ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8040ad4:	4b08      	ldr	r3, [pc, #32]	; (8040af8 <HAL_Init+0x40>)
 8040ad6:	681b      	ldr	r3, [r3, #0]
 8040ad8:	4a07      	ldr	r2, [pc, #28]	; (8040af8 <HAL_Init+0x40>)
 8040ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8040ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040ae0:	2003      	movs	r0, #3
 8040ae2:	f000 f931 	bl	8040d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040ae6:	2000      	movs	r0, #0
 8040ae8:	f000 f808 	bl	8040afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8040aec:	f7ff fe9c 	bl	8040828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040af0:	2300      	movs	r3, #0
}
 8040af2:	4618      	mov	r0, r3
 8040af4:	bd80      	pop	{r7, pc}
 8040af6:	bf00      	nop
 8040af8:	40023c00 	.word	0x40023c00

08040afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040afc:	b580      	push	{r7, lr}
 8040afe:	b082      	sub	sp, #8
 8040b00:	af00      	add	r7, sp, #0
 8040b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040b04:	4b12      	ldr	r3, [pc, #72]	; (8040b50 <HAL_InitTick+0x54>)
 8040b06:	681a      	ldr	r2, [r3, #0]
 8040b08:	4b12      	ldr	r3, [pc, #72]	; (8040b54 <HAL_InitTick+0x58>)
 8040b0a:	781b      	ldrb	r3, [r3, #0]
 8040b0c:	4619      	mov	r1, r3
 8040b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8040b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8040b1a:	4618      	mov	r0, r3
 8040b1c:	f000 f93b 	bl	8040d96 <HAL_SYSTICK_Config>
 8040b20:	4603      	mov	r3, r0
 8040b22:	2b00      	cmp	r3, #0
 8040b24:	d001      	beq.n	8040b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040b26:	2301      	movs	r3, #1
 8040b28:	e00e      	b.n	8040b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040b2a:	687b      	ldr	r3, [r7, #4]
 8040b2c:	2b0f      	cmp	r3, #15
 8040b2e:	d80a      	bhi.n	8040b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040b30:	2200      	movs	r2, #0
 8040b32:	6879      	ldr	r1, [r7, #4]
 8040b34:	f04f 30ff 	mov.w	r0, #4294967295
 8040b38:	f000 f911 	bl	8040d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040b3c:	4a06      	ldr	r2, [pc, #24]	; (8040b58 <HAL_InitTick+0x5c>)
 8040b3e:	687b      	ldr	r3, [r7, #4]
 8040b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040b42:	2300      	movs	r3, #0
 8040b44:	e000      	b.n	8040b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040b46:	2301      	movs	r3, #1
}
 8040b48:	4618      	mov	r0, r3
 8040b4a:	3708      	adds	r7, #8
 8040b4c:	46bd      	mov	sp, r7
 8040b4e:	bd80      	pop	{r7, pc}
 8040b50:	20000000 	.word	0x20000000
 8040b54:	20000008 	.word	0x20000008
 8040b58:	20000004 	.word	0x20000004

08040b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040b5c:	b480      	push	{r7}
 8040b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040b60:	4b06      	ldr	r3, [pc, #24]	; (8040b7c <HAL_IncTick+0x20>)
 8040b62:	781b      	ldrb	r3, [r3, #0]
 8040b64:	461a      	mov	r2, r3
 8040b66:	4b06      	ldr	r3, [pc, #24]	; (8040b80 <HAL_IncTick+0x24>)
 8040b68:	681b      	ldr	r3, [r3, #0]
 8040b6a:	4413      	add	r3, r2
 8040b6c:	4a04      	ldr	r2, [pc, #16]	; (8040b80 <HAL_IncTick+0x24>)
 8040b6e:	6013      	str	r3, [r2, #0]
}
 8040b70:	bf00      	nop
 8040b72:	46bd      	mov	sp, r7
 8040b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b78:	4770      	bx	lr
 8040b7a:	bf00      	nop
 8040b7c:	20000008 	.word	0x20000008
 8040b80:	20000474 	.word	0x20000474

08040b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040b84:	b480      	push	{r7}
 8040b86:	af00      	add	r7, sp, #0
  return uwTick;
 8040b88:	4b03      	ldr	r3, [pc, #12]	; (8040b98 <HAL_GetTick+0x14>)
 8040b8a:	681b      	ldr	r3, [r3, #0]
}
 8040b8c:	4618      	mov	r0, r3
 8040b8e:	46bd      	mov	sp, r7
 8040b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b94:	4770      	bx	lr
 8040b96:	bf00      	nop
 8040b98:	20000474 	.word	0x20000474

08040b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040b9c:	b580      	push	{r7, lr}
 8040b9e:	b084      	sub	sp, #16
 8040ba0:	af00      	add	r7, sp, #0
 8040ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040ba4:	f7ff ffee 	bl	8040b84 <HAL_GetTick>
 8040ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040baa:	687b      	ldr	r3, [r7, #4]
 8040bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040bae:	68fb      	ldr	r3, [r7, #12]
 8040bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040bb4:	d005      	beq.n	8040bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040bb6:	4b0a      	ldr	r3, [pc, #40]	; (8040be0 <HAL_Delay+0x44>)
 8040bb8:	781b      	ldrb	r3, [r3, #0]
 8040bba:	461a      	mov	r2, r3
 8040bbc:	68fb      	ldr	r3, [r7, #12]
 8040bbe:	4413      	add	r3, r2
 8040bc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8040bc2:	bf00      	nop
 8040bc4:	f7ff ffde 	bl	8040b84 <HAL_GetTick>
 8040bc8:	4602      	mov	r2, r0
 8040bca:	68bb      	ldr	r3, [r7, #8]
 8040bcc:	1ad3      	subs	r3, r2, r3
 8040bce:	68fa      	ldr	r2, [r7, #12]
 8040bd0:	429a      	cmp	r2, r3
 8040bd2:	d8f7      	bhi.n	8040bc4 <HAL_Delay+0x28>
  {
  }
}
 8040bd4:	bf00      	nop
 8040bd6:	bf00      	nop
 8040bd8:	3710      	adds	r7, #16
 8040bda:	46bd      	mov	sp, r7
 8040bdc:	bd80      	pop	{r7, pc}
 8040bde:	bf00      	nop
 8040be0:	20000008 	.word	0x20000008

08040be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040be4:	b480      	push	{r7}
 8040be6:	b085      	sub	sp, #20
 8040be8:	af00      	add	r7, sp, #0
 8040bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040bec:	687b      	ldr	r3, [r7, #4]
 8040bee:	f003 0307 	and.w	r3, r3, #7
 8040bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040bf4:	4b0c      	ldr	r3, [pc, #48]	; (8040c28 <__NVIC_SetPriorityGrouping+0x44>)
 8040bf6:	68db      	ldr	r3, [r3, #12]
 8040bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040bfa:	68ba      	ldr	r2, [r7, #8]
 8040bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040c00:	4013      	ands	r3, r2
 8040c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040c04:	68fb      	ldr	r3, [r7, #12]
 8040c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040c08:	68bb      	ldr	r3, [r7, #8]
 8040c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040c16:	4a04      	ldr	r2, [pc, #16]	; (8040c28 <__NVIC_SetPriorityGrouping+0x44>)
 8040c18:	68bb      	ldr	r3, [r7, #8]
 8040c1a:	60d3      	str	r3, [r2, #12]
}
 8040c1c:	bf00      	nop
 8040c1e:	3714      	adds	r7, #20
 8040c20:	46bd      	mov	sp, r7
 8040c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c26:	4770      	bx	lr
 8040c28:	e000ed00 	.word	0xe000ed00

08040c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040c2c:	b480      	push	{r7}
 8040c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040c30:	4b04      	ldr	r3, [pc, #16]	; (8040c44 <__NVIC_GetPriorityGrouping+0x18>)
 8040c32:	68db      	ldr	r3, [r3, #12]
 8040c34:	0a1b      	lsrs	r3, r3, #8
 8040c36:	f003 0307 	and.w	r3, r3, #7
}
 8040c3a:	4618      	mov	r0, r3
 8040c3c:	46bd      	mov	sp, r7
 8040c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c42:	4770      	bx	lr
 8040c44:	e000ed00 	.word	0xe000ed00

08040c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040c48:	b480      	push	{r7}
 8040c4a:	b083      	sub	sp, #12
 8040c4c:	af00      	add	r7, sp, #0
 8040c4e:	4603      	mov	r3, r0
 8040c50:	6039      	str	r1, [r7, #0]
 8040c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c58:	2b00      	cmp	r3, #0
 8040c5a:	db0a      	blt.n	8040c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c5c:	683b      	ldr	r3, [r7, #0]
 8040c5e:	b2da      	uxtb	r2, r3
 8040c60:	490c      	ldr	r1, [pc, #48]	; (8040c94 <__NVIC_SetPriority+0x4c>)
 8040c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c66:	0112      	lsls	r2, r2, #4
 8040c68:	b2d2      	uxtb	r2, r2
 8040c6a:	440b      	add	r3, r1
 8040c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040c70:	e00a      	b.n	8040c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c72:	683b      	ldr	r3, [r7, #0]
 8040c74:	b2da      	uxtb	r2, r3
 8040c76:	4908      	ldr	r1, [pc, #32]	; (8040c98 <__NVIC_SetPriority+0x50>)
 8040c78:	79fb      	ldrb	r3, [r7, #7]
 8040c7a:	f003 030f 	and.w	r3, r3, #15
 8040c7e:	3b04      	subs	r3, #4
 8040c80:	0112      	lsls	r2, r2, #4
 8040c82:	b2d2      	uxtb	r2, r2
 8040c84:	440b      	add	r3, r1
 8040c86:	761a      	strb	r2, [r3, #24]
}
 8040c88:	bf00      	nop
 8040c8a:	370c      	adds	r7, #12
 8040c8c:	46bd      	mov	sp, r7
 8040c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c92:	4770      	bx	lr
 8040c94:	e000e100 	.word	0xe000e100
 8040c98:	e000ed00 	.word	0xe000ed00

08040c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040c9c:	b480      	push	{r7}
 8040c9e:	b089      	sub	sp, #36	; 0x24
 8040ca0:	af00      	add	r7, sp, #0
 8040ca2:	60f8      	str	r0, [r7, #12]
 8040ca4:	60b9      	str	r1, [r7, #8]
 8040ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040ca8:	68fb      	ldr	r3, [r7, #12]
 8040caa:	f003 0307 	and.w	r3, r3, #7
 8040cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040cb0:	69fb      	ldr	r3, [r7, #28]
 8040cb2:	f1c3 0307 	rsb	r3, r3, #7
 8040cb6:	2b04      	cmp	r3, #4
 8040cb8:	bf28      	it	cs
 8040cba:	2304      	movcs	r3, #4
 8040cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040cbe:	69fb      	ldr	r3, [r7, #28]
 8040cc0:	3304      	adds	r3, #4
 8040cc2:	2b06      	cmp	r3, #6
 8040cc4:	d902      	bls.n	8040ccc <NVIC_EncodePriority+0x30>
 8040cc6:	69fb      	ldr	r3, [r7, #28]
 8040cc8:	3b03      	subs	r3, #3
 8040cca:	e000      	b.n	8040cce <NVIC_EncodePriority+0x32>
 8040ccc:	2300      	movs	r3, #0
 8040cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8040cd4:	69bb      	ldr	r3, [r7, #24]
 8040cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8040cda:	43da      	mvns	r2, r3
 8040cdc:	68bb      	ldr	r3, [r7, #8]
 8040cde:	401a      	ands	r2, r3
 8040ce0:	697b      	ldr	r3, [r7, #20]
 8040ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8040ce8:	697b      	ldr	r3, [r7, #20]
 8040cea:	fa01 f303 	lsl.w	r3, r1, r3
 8040cee:	43d9      	mvns	r1, r3
 8040cf0:	687b      	ldr	r3, [r7, #4]
 8040cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040cf4:	4313      	orrs	r3, r2
         );
}
 8040cf6:	4618      	mov	r0, r3
 8040cf8:	3724      	adds	r7, #36	; 0x24
 8040cfa:	46bd      	mov	sp, r7
 8040cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d00:	4770      	bx	lr
	...

08040d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040d04:	b580      	push	{r7, lr}
 8040d06:	b082      	sub	sp, #8
 8040d08:	af00      	add	r7, sp, #0
 8040d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040d0c:	687b      	ldr	r3, [r7, #4]
 8040d0e:	3b01      	subs	r3, #1
 8040d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040d14:	d301      	bcc.n	8040d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040d16:	2301      	movs	r3, #1
 8040d18:	e00f      	b.n	8040d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040d1a:	4a0a      	ldr	r2, [pc, #40]	; (8040d44 <SysTick_Config+0x40>)
 8040d1c:	687b      	ldr	r3, [r7, #4]
 8040d1e:	3b01      	subs	r3, #1
 8040d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040d22:	210f      	movs	r1, #15
 8040d24:	f04f 30ff 	mov.w	r0, #4294967295
 8040d28:	f7ff ff8e 	bl	8040c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040d2c:	4b05      	ldr	r3, [pc, #20]	; (8040d44 <SysTick_Config+0x40>)
 8040d2e:	2200      	movs	r2, #0
 8040d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040d32:	4b04      	ldr	r3, [pc, #16]	; (8040d44 <SysTick_Config+0x40>)
 8040d34:	2207      	movs	r2, #7
 8040d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040d38:	2300      	movs	r3, #0
}
 8040d3a:	4618      	mov	r0, r3
 8040d3c:	3708      	adds	r7, #8
 8040d3e:	46bd      	mov	sp, r7
 8040d40:	bd80      	pop	{r7, pc}
 8040d42:	bf00      	nop
 8040d44:	e000e010 	.word	0xe000e010

08040d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040d48:	b580      	push	{r7, lr}
 8040d4a:	b082      	sub	sp, #8
 8040d4c:	af00      	add	r7, sp, #0
 8040d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040d50:	6878      	ldr	r0, [r7, #4]
 8040d52:	f7ff ff47 	bl	8040be4 <__NVIC_SetPriorityGrouping>
}
 8040d56:	bf00      	nop
 8040d58:	3708      	adds	r7, #8
 8040d5a:	46bd      	mov	sp, r7
 8040d5c:	bd80      	pop	{r7, pc}

08040d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040d5e:	b580      	push	{r7, lr}
 8040d60:	b086      	sub	sp, #24
 8040d62:	af00      	add	r7, sp, #0
 8040d64:	4603      	mov	r3, r0
 8040d66:	60b9      	str	r1, [r7, #8]
 8040d68:	607a      	str	r2, [r7, #4]
 8040d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8040d6c:	2300      	movs	r3, #0
 8040d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040d70:	f7ff ff5c 	bl	8040c2c <__NVIC_GetPriorityGrouping>
 8040d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040d76:	687a      	ldr	r2, [r7, #4]
 8040d78:	68b9      	ldr	r1, [r7, #8]
 8040d7a:	6978      	ldr	r0, [r7, #20]
 8040d7c:	f7ff ff8e 	bl	8040c9c <NVIC_EncodePriority>
 8040d80:	4602      	mov	r2, r0
 8040d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040d86:	4611      	mov	r1, r2
 8040d88:	4618      	mov	r0, r3
 8040d8a:	f7ff ff5d 	bl	8040c48 <__NVIC_SetPriority>
}
 8040d8e:	bf00      	nop
 8040d90:	3718      	adds	r7, #24
 8040d92:	46bd      	mov	sp, r7
 8040d94:	bd80      	pop	{r7, pc}

08040d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040d96:	b580      	push	{r7, lr}
 8040d98:	b082      	sub	sp, #8
 8040d9a:	af00      	add	r7, sp, #0
 8040d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040d9e:	6878      	ldr	r0, [r7, #4]
 8040da0:	f7ff ffb0 	bl	8040d04 <SysTick_Config>
 8040da4:	4603      	mov	r3, r0
}
 8040da6:	4618      	mov	r0, r3
 8040da8:	3708      	adds	r7, #8
 8040daa:	46bd      	mov	sp, r7
 8040dac:	bd80      	pop	{r7, pc}
	...

08040db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040db0:	b480      	push	{r7}
 8040db2:	b089      	sub	sp, #36	; 0x24
 8040db4:	af00      	add	r7, sp, #0
 8040db6:	6078      	str	r0, [r7, #4]
 8040db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8040dba:	2300      	movs	r3, #0
 8040dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8040dbe:	2300      	movs	r3, #0
 8040dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8040dc2:	2300      	movs	r3, #0
 8040dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8040dc6:	2300      	movs	r3, #0
 8040dc8:	61fb      	str	r3, [r7, #28]
 8040dca:	e165      	b.n	8041098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8040dcc:	2201      	movs	r2, #1
 8040dce:	69fb      	ldr	r3, [r7, #28]
 8040dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8040dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8040dd6:	683b      	ldr	r3, [r7, #0]
 8040dd8:	681b      	ldr	r3, [r3, #0]
 8040dda:	697a      	ldr	r2, [r7, #20]
 8040ddc:	4013      	ands	r3, r2
 8040dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8040de0:	693a      	ldr	r2, [r7, #16]
 8040de2:	697b      	ldr	r3, [r7, #20]
 8040de4:	429a      	cmp	r2, r3
 8040de6:	f040 8154 	bne.w	8041092 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8040dea:	683b      	ldr	r3, [r7, #0]
 8040dec:	685b      	ldr	r3, [r3, #4]
 8040dee:	f003 0303 	and.w	r3, r3, #3
 8040df2:	2b01      	cmp	r3, #1
 8040df4:	d005      	beq.n	8040e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040df6:	683b      	ldr	r3, [r7, #0]
 8040df8:	685b      	ldr	r3, [r3, #4]
 8040dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8040dfe:	2b02      	cmp	r3, #2
 8040e00:	d130      	bne.n	8040e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8040e02:	687b      	ldr	r3, [r7, #4]
 8040e04:	689b      	ldr	r3, [r3, #8]
 8040e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8040e08:	69fb      	ldr	r3, [r7, #28]
 8040e0a:	005b      	lsls	r3, r3, #1
 8040e0c:	2203      	movs	r2, #3
 8040e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8040e12:	43db      	mvns	r3, r3
 8040e14:	69ba      	ldr	r2, [r7, #24]
 8040e16:	4013      	ands	r3, r2
 8040e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040e1a:	683b      	ldr	r3, [r7, #0]
 8040e1c:	68da      	ldr	r2, [r3, #12]
 8040e1e:	69fb      	ldr	r3, [r7, #28]
 8040e20:	005b      	lsls	r3, r3, #1
 8040e22:	fa02 f303 	lsl.w	r3, r2, r3
 8040e26:	69ba      	ldr	r2, [r7, #24]
 8040e28:	4313      	orrs	r3, r2
 8040e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8040e2c:	687b      	ldr	r3, [r7, #4]
 8040e2e:	69ba      	ldr	r2, [r7, #24]
 8040e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040e32:	687b      	ldr	r3, [r7, #4]
 8040e34:	685b      	ldr	r3, [r3, #4]
 8040e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040e38:	2201      	movs	r2, #1
 8040e3a:	69fb      	ldr	r3, [r7, #28]
 8040e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8040e40:	43db      	mvns	r3, r3
 8040e42:	69ba      	ldr	r2, [r7, #24]
 8040e44:	4013      	ands	r3, r2
 8040e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040e48:	683b      	ldr	r3, [r7, #0]
 8040e4a:	685b      	ldr	r3, [r3, #4]
 8040e4c:	091b      	lsrs	r3, r3, #4
 8040e4e:	f003 0201 	and.w	r2, r3, #1
 8040e52:	69fb      	ldr	r3, [r7, #28]
 8040e54:	fa02 f303 	lsl.w	r3, r2, r3
 8040e58:	69ba      	ldr	r2, [r7, #24]
 8040e5a:	4313      	orrs	r3, r2
 8040e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8040e5e:	687b      	ldr	r3, [r7, #4]
 8040e60:	69ba      	ldr	r2, [r7, #24]
 8040e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040e64:	683b      	ldr	r3, [r7, #0]
 8040e66:	685b      	ldr	r3, [r3, #4]
 8040e68:	f003 0303 	and.w	r3, r3, #3
 8040e6c:	2b03      	cmp	r3, #3
 8040e6e:	d017      	beq.n	8040ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8040e70:	687b      	ldr	r3, [r7, #4]
 8040e72:	68db      	ldr	r3, [r3, #12]
 8040e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8040e76:	69fb      	ldr	r3, [r7, #28]
 8040e78:	005b      	lsls	r3, r3, #1
 8040e7a:	2203      	movs	r2, #3
 8040e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8040e80:	43db      	mvns	r3, r3
 8040e82:	69ba      	ldr	r2, [r7, #24]
 8040e84:	4013      	ands	r3, r2
 8040e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8040e88:	683b      	ldr	r3, [r7, #0]
 8040e8a:	689a      	ldr	r2, [r3, #8]
 8040e8c:	69fb      	ldr	r3, [r7, #28]
 8040e8e:	005b      	lsls	r3, r3, #1
 8040e90:	fa02 f303 	lsl.w	r3, r2, r3
 8040e94:	69ba      	ldr	r2, [r7, #24]
 8040e96:	4313      	orrs	r3, r2
 8040e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8040e9a:	687b      	ldr	r3, [r7, #4]
 8040e9c:	69ba      	ldr	r2, [r7, #24]
 8040e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040ea0:	683b      	ldr	r3, [r7, #0]
 8040ea2:	685b      	ldr	r3, [r3, #4]
 8040ea4:	f003 0303 	and.w	r3, r3, #3
 8040ea8:	2b02      	cmp	r3, #2
 8040eaa:	d123      	bne.n	8040ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8040eac:	69fb      	ldr	r3, [r7, #28]
 8040eae:	08da      	lsrs	r2, r3, #3
 8040eb0:	687b      	ldr	r3, [r7, #4]
 8040eb2:	3208      	adds	r2, #8
 8040eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8040eba:	69fb      	ldr	r3, [r7, #28]
 8040ebc:	f003 0307 	and.w	r3, r3, #7
 8040ec0:	009b      	lsls	r3, r3, #2
 8040ec2:	220f      	movs	r2, #15
 8040ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8040ec8:	43db      	mvns	r3, r3
 8040eca:	69ba      	ldr	r2, [r7, #24]
 8040ecc:	4013      	ands	r3, r2
 8040ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8040ed0:	683b      	ldr	r3, [r7, #0]
 8040ed2:	691a      	ldr	r2, [r3, #16]
 8040ed4:	69fb      	ldr	r3, [r7, #28]
 8040ed6:	f003 0307 	and.w	r3, r3, #7
 8040eda:	009b      	lsls	r3, r3, #2
 8040edc:	fa02 f303 	lsl.w	r3, r2, r3
 8040ee0:	69ba      	ldr	r2, [r7, #24]
 8040ee2:	4313      	orrs	r3, r2
 8040ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8040ee6:	69fb      	ldr	r3, [r7, #28]
 8040ee8:	08da      	lsrs	r2, r3, #3
 8040eea:	687b      	ldr	r3, [r7, #4]
 8040eec:	3208      	adds	r2, #8
 8040eee:	69b9      	ldr	r1, [r7, #24]
 8040ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040ef4:	687b      	ldr	r3, [r7, #4]
 8040ef6:	681b      	ldr	r3, [r3, #0]
 8040ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8040efa:	69fb      	ldr	r3, [r7, #28]
 8040efc:	005b      	lsls	r3, r3, #1
 8040efe:	2203      	movs	r2, #3
 8040f00:	fa02 f303 	lsl.w	r3, r2, r3
 8040f04:	43db      	mvns	r3, r3
 8040f06:	69ba      	ldr	r2, [r7, #24]
 8040f08:	4013      	ands	r3, r2
 8040f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040f0c:	683b      	ldr	r3, [r7, #0]
 8040f0e:	685b      	ldr	r3, [r3, #4]
 8040f10:	f003 0203 	and.w	r2, r3, #3
 8040f14:	69fb      	ldr	r3, [r7, #28]
 8040f16:	005b      	lsls	r3, r3, #1
 8040f18:	fa02 f303 	lsl.w	r3, r2, r3
 8040f1c:	69ba      	ldr	r2, [r7, #24]
 8040f1e:	4313      	orrs	r3, r2
 8040f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8040f22:	687b      	ldr	r3, [r7, #4]
 8040f24:	69ba      	ldr	r2, [r7, #24]
 8040f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8040f28:	683b      	ldr	r3, [r7, #0]
 8040f2a:	685b      	ldr	r3, [r3, #4]
 8040f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8040f30:	2b00      	cmp	r3, #0
 8040f32:	f000 80ae 	beq.w	8041092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040f36:	2300      	movs	r3, #0
 8040f38:	60fb      	str	r3, [r7, #12]
 8040f3a:	4b5d      	ldr	r3, [pc, #372]	; (80410b0 <HAL_GPIO_Init+0x300>)
 8040f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040f3e:	4a5c      	ldr	r2, [pc, #368]	; (80410b0 <HAL_GPIO_Init+0x300>)
 8040f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040f44:	6453      	str	r3, [r2, #68]	; 0x44
 8040f46:	4b5a      	ldr	r3, [pc, #360]	; (80410b0 <HAL_GPIO_Init+0x300>)
 8040f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040f4e:	60fb      	str	r3, [r7, #12]
 8040f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8040f52:	4a58      	ldr	r2, [pc, #352]	; (80410b4 <HAL_GPIO_Init+0x304>)
 8040f54:	69fb      	ldr	r3, [r7, #28]
 8040f56:	089b      	lsrs	r3, r3, #2
 8040f58:	3302      	adds	r3, #2
 8040f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8040f60:	69fb      	ldr	r3, [r7, #28]
 8040f62:	f003 0303 	and.w	r3, r3, #3
 8040f66:	009b      	lsls	r3, r3, #2
 8040f68:	220f      	movs	r2, #15
 8040f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8040f6e:	43db      	mvns	r3, r3
 8040f70:	69ba      	ldr	r2, [r7, #24]
 8040f72:	4013      	ands	r3, r2
 8040f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8040f76:	687b      	ldr	r3, [r7, #4]
 8040f78:	4a4f      	ldr	r2, [pc, #316]	; (80410b8 <HAL_GPIO_Init+0x308>)
 8040f7a:	4293      	cmp	r3, r2
 8040f7c:	d025      	beq.n	8040fca <HAL_GPIO_Init+0x21a>
 8040f7e:	687b      	ldr	r3, [r7, #4]
 8040f80:	4a4e      	ldr	r2, [pc, #312]	; (80410bc <HAL_GPIO_Init+0x30c>)
 8040f82:	4293      	cmp	r3, r2
 8040f84:	d01f      	beq.n	8040fc6 <HAL_GPIO_Init+0x216>
 8040f86:	687b      	ldr	r3, [r7, #4]
 8040f88:	4a4d      	ldr	r2, [pc, #308]	; (80410c0 <HAL_GPIO_Init+0x310>)
 8040f8a:	4293      	cmp	r3, r2
 8040f8c:	d019      	beq.n	8040fc2 <HAL_GPIO_Init+0x212>
 8040f8e:	687b      	ldr	r3, [r7, #4]
 8040f90:	4a4c      	ldr	r2, [pc, #304]	; (80410c4 <HAL_GPIO_Init+0x314>)
 8040f92:	4293      	cmp	r3, r2
 8040f94:	d013      	beq.n	8040fbe <HAL_GPIO_Init+0x20e>
 8040f96:	687b      	ldr	r3, [r7, #4]
 8040f98:	4a4b      	ldr	r2, [pc, #300]	; (80410c8 <HAL_GPIO_Init+0x318>)
 8040f9a:	4293      	cmp	r3, r2
 8040f9c:	d00d      	beq.n	8040fba <HAL_GPIO_Init+0x20a>
 8040f9e:	687b      	ldr	r3, [r7, #4]
 8040fa0:	4a4a      	ldr	r2, [pc, #296]	; (80410cc <HAL_GPIO_Init+0x31c>)
 8040fa2:	4293      	cmp	r3, r2
 8040fa4:	d007      	beq.n	8040fb6 <HAL_GPIO_Init+0x206>
 8040fa6:	687b      	ldr	r3, [r7, #4]
 8040fa8:	4a49      	ldr	r2, [pc, #292]	; (80410d0 <HAL_GPIO_Init+0x320>)
 8040faa:	4293      	cmp	r3, r2
 8040fac:	d101      	bne.n	8040fb2 <HAL_GPIO_Init+0x202>
 8040fae:	2306      	movs	r3, #6
 8040fb0:	e00c      	b.n	8040fcc <HAL_GPIO_Init+0x21c>
 8040fb2:	2307      	movs	r3, #7
 8040fb4:	e00a      	b.n	8040fcc <HAL_GPIO_Init+0x21c>
 8040fb6:	2305      	movs	r3, #5
 8040fb8:	e008      	b.n	8040fcc <HAL_GPIO_Init+0x21c>
 8040fba:	2304      	movs	r3, #4
 8040fbc:	e006      	b.n	8040fcc <HAL_GPIO_Init+0x21c>
 8040fbe:	2303      	movs	r3, #3
 8040fc0:	e004      	b.n	8040fcc <HAL_GPIO_Init+0x21c>
 8040fc2:	2302      	movs	r3, #2
 8040fc4:	e002      	b.n	8040fcc <HAL_GPIO_Init+0x21c>
 8040fc6:	2301      	movs	r3, #1
 8040fc8:	e000      	b.n	8040fcc <HAL_GPIO_Init+0x21c>
 8040fca:	2300      	movs	r3, #0
 8040fcc:	69fa      	ldr	r2, [r7, #28]
 8040fce:	f002 0203 	and.w	r2, r2, #3
 8040fd2:	0092      	lsls	r2, r2, #2
 8040fd4:	4093      	lsls	r3, r2
 8040fd6:	69ba      	ldr	r2, [r7, #24]
 8040fd8:	4313      	orrs	r3, r2
 8040fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8040fdc:	4935      	ldr	r1, [pc, #212]	; (80410b4 <HAL_GPIO_Init+0x304>)
 8040fde:	69fb      	ldr	r3, [r7, #28]
 8040fe0:	089b      	lsrs	r3, r3, #2
 8040fe2:	3302      	adds	r3, #2
 8040fe4:	69ba      	ldr	r2, [r7, #24]
 8040fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8040fea:	4b3a      	ldr	r3, [pc, #232]	; (80410d4 <HAL_GPIO_Init+0x324>)
 8040fec:	681b      	ldr	r3, [r3, #0]
 8040fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040ff0:	693b      	ldr	r3, [r7, #16]
 8040ff2:	43db      	mvns	r3, r3
 8040ff4:	69ba      	ldr	r2, [r7, #24]
 8040ff6:	4013      	ands	r3, r2
 8040ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8040ffa:	683b      	ldr	r3, [r7, #0]
 8040ffc:	685b      	ldr	r3, [r3, #4]
 8040ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041002:	2b00      	cmp	r3, #0
 8041004:	d003      	beq.n	804100e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8041006:	69ba      	ldr	r2, [r7, #24]
 8041008:	693b      	ldr	r3, [r7, #16]
 804100a:	4313      	orrs	r3, r2
 804100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 804100e:	4a31      	ldr	r2, [pc, #196]	; (80410d4 <HAL_GPIO_Init+0x324>)
 8041010:	69bb      	ldr	r3, [r7, #24]
 8041012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8041014:	4b2f      	ldr	r3, [pc, #188]	; (80410d4 <HAL_GPIO_Init+0x324>)
 8041016:	685b      	ldr	r3, [r3, #4]
 8041018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804101a:	693b      	ldr	r3, [r7, #16]
 804101c:	43db      	mvns	r3, r3
 804101e:	69ba      	ldr	r2, [r7, #24]
 8041020:	4013      	ands	r3, r2
 8041022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8041024:	683b      	ldr	r3, [r7, #0]
 8041026:	685b      	ldr	r3, [r3, #4]
 8041028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804102c:	2b00      	cmp	r3, #0
 804102e:	d003      	beq.n	8041038 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8041030:	69ba      	ldr	r2, [r7, #24]
 8041032:	693b      	ldr	r3, [r7, #16]
 8041034:	4313      	orrs	r3, r2
 8041036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8041038:	4a26      	ldr	r2, [pc, #152]	; (80410d4 <HAL_GPIO_Init+0x324>)
 804103a:	69bb      	ldr	r3, [r7, #24]
 804103c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 804103e:	4b25      	ldr	r3, [pc, #148]	; (80410d4 <HAL_GPIO_Init+0x324>)
 8041040:	689b      	ldr	r3, [r3, #8]
 8041042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041044:	693b      	ldr	r3, [r7, #16]
 8041046:	43db      	mvns	r3, r3
 8041048:	69ba      	ldr	r2, [r7, #24]
 804104a:	4013      	ands	r3, r2
 804104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 804104e:	683b      	ldr	r3, [r7, #0]
 8041050:	685b      	ldr	r3, [r3, #4]
 8041052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041056:	2b00      	cmp	r3, #0
 8041058:	d003      	beq.n	8041062 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 804105a:	69ba      	ldr	r2, [r7, #24]
 804105c:	693b      	ldr	r3, [r7, #16]
 804105e:	4313      	orrs	r3, r2
 8041060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8041062:	4a1c      	ldr	r2, [pc, #112]	; (80410d4 <HAL_GPIO_Init+0x324>)
 8041064:	69bb      	ldr	r3, [r7, #24]
 8041066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8041068:	4b1a      	ldr	r3, [pc, #104]	; (80410d4 <HAL_GPIO_Init+0x324>)
 804106a:	68db      	ldr	r3, [r3, #12]
 804106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804106e:	693b      	ldr	r3, [r7, #16]
 8041070:	43db      	mvns	r3, r3
 8041072:	69ba      	ldr	r2, [r7, #24]
 8041074:	4013      	ands	r3, r2
 8041076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8041078:	683b      	ldr	r3, [r7, #0]
 804107a:	685b      	ldr	r3, [r3, #4]
 804107c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041080:	2b00      	cmp	r3, #0
 8041082:	d003      	beq.n	804108c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8041084:	69ba      	ldr	r2, [r7, #24]
 8041086:	693b      	ldr	r3, [r7, #16]
 8041088:	4313      	orrs	r3, r2
 804108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 804108c:	4a11      	ldr	r2, [pc, #68]	; (80410d4 <HAL_GPIO_Init+0x324>)
 804108e:	69bb      	ldr	r3, [r7, #24]
 8041090:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8041092:	69fb      	ldr	r3, [r7, #28]
 8041094:	3301      	adds	r3, #1
 8041096:	61fb      	str	r3, [r7, #28]
 8041098:	69fb      	ldr	r3, [r7, #28]
 804109a:	2b0f      	cmp	r3, #15
 804109c:	f67f ae96 	bls.w	8040dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80410a0:	bf00      	nop
 80410a2:	bf00      	nop
 80410a4:	3724      	adds	r7, #36	; 0x24
 80410a6:	46bd      	mov	sp, r7
 80410a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410ac:	4770      	bx	lr
 80410ae:	bf00      	nop
 80410b0:	40023800 	.word	0x40023800
 80410b4:	40013800 	.word	0x40013800
 80410b8:	40020000 	.word	0x40020000
 80410bc:	40020400 	.word	0x40020400
 80410c0:	40020800 	.word	0x40020800
 80410c4:	40020c00 	.word	0x40020c00
 80410c8:	40021000 	.word	0x40021000
 80410cc:	40021400 	.word	0x40021400
 80410d0:	40021800 	.word	0x40021800
 80410d4:	40013c00 	.word	0x40013c00

080410d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80410d8:	b480      	push	{r7}
 80410da:	b083      	sub	sp, #12
 80410dc:	af00      	add	r7, sp, #0
 80410de:	6078      	str	r0, [r7, #4]
 80410e0:	460b      	mov	r3, r1
 80410e2:	807b      	strh	r3, [r7, #2]
 80410e4:	4613      	mov	r3, r2
 80410e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80410e8:	787b      	ldrb	r3, [r7, #1]
 80410ea:	2b00      	cmp	r3, #0
 80410ec:	d003      	beq.n	80410f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80410ee:	887a      	ldrh	r2, [r7, #2]
 80410f0:	687b      	ldr	r3, [r7, #4]
 80410f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80410f4:	e003      	b.n	80410fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80410f6:	887b      	ldrh	r3, [r7, #2]
 80410f8:	041a      	lsls	r2, r3, #16
 80410fa:	687b      	ldr	r3, [r7, #4]
 80410fc:	619a      	str	r2, [r3, #24]
}
 80410fe:	bf00      	nop
 8041100:	370c      	adds	r7, #12
 8041102:	46bd      	mov	sp, r7
 8041104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041108:	4770      	bx	lr

0804110a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 804110a:	b5f0      	push	{r4, r5, r6, r7, lr}
 804110c:	b08f      	sub	sp, #60	; 0x3c
 804110e:	af0a      	add	r7, sp, #40	; 0x28
 8041110:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8041112:	687b      	ldr	r3, [r7, #4]
 8041114:	2b00      	cmp	r3, #0
 8041116:	d101      	bne.n	804111c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8041118:	2301      	movs	r3, #1
 804111a:	e116      	b.n	804134a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 804111c:	687b      	ldr	r3, [r7, #4]
 804111e:	681b      	ldr	r3, [r3, #0]
 8041120:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8041122:	687b      	ldr	r3, [r7, #4]
 8041124:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8041128:	b2db      	uxtb	r3, r3
 804112a:	2b00      	cmp	r3, #0
 804112c:	d106      	bne.n	804113c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 804112e:	687b      	ldr	r3, [r7, #4]
 8041130:	2200      	movs	r2, #0
 8041132:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8041136:	6878      	ldr	r0, [r7, #4]
 8041138:	f7ff fbe6 	bl	8040908 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 804113c:	687b      	ldr	r3, [r7, #4]
 804113e:	2203      	movs	r2, #3
 8041140:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8041144:	68bb      	ldr	r3, [r7, #8]
 8041146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804114c:	2b00      	cmp	r3, #0
 804114e:	d102      	bne.n	8041156 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8041150:	687b      	ldr	r3, [r7, #4]
 8041152:	2200      	movs	r2, #0
 8041154:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8041156:	687b      	ldr	r3, [r7, #4]
 8041158:	681b      	ldr	r3, [r3, #0]
 804115a:	4618      	mov	r0, r3
 804115c:	f001 fab3 	bl	80426c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8041160:	687b      	ldr	r3, [r7, #4]
 8041162:	681b      	ldr	r3, [r3, #0]
 8041164:	603b      	str	r3, [r7, #0]
 8041166:	687e      	ldr	r6, [r7, #4]
 8041168:	466d      	mov	r5, sp
 804116a:	f106 0410 	add.w	r4, r6, #16
 804116e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8041170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8041172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8041174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8041176:	e894 0003 	ldmia.w	r4, {r0, r1}
 804117a:	e885 0003 	stmia.w	r5, {r0, r1}
 804117e:	1d33      	adds	r3, r6, #4
 8041180:	cb0e      	ldmia	r3, {r1, r2, r3}
 8041182:	6838      	ldr	r0, [r7, #0]
 8041184:	f001 fa3e 	bl	8042604 <USB_CoreInit>
 8041188:	4603      	mov	r3, r0
 804118a:	2b00      	cmp	r3, #0
 804118c:	d005      	beq.n	804119a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 804118e:	687b      	ldr	r3, [r7, #4]
 8041190:	2202      	movs	r2, #2
 8041192:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8041196:	2301      	movs	r3, #1
 8041198:	e0d7      	b.n	804134a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 804119a:	687b      	ldr	r3, [r7, #4]
 804119c:	681b      	ldr	r3, [r3, #0]
 804119e:	2100      	movs	r1, #0
 80411a0:	4618      	mov	r0, r3
 80411a2:	f001 faa1 	bl	80426e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80411a6:	2300      	movs	r3, #0
 80411a8:	73fb      	strb	r3, [r7, #15]
 80411aa:	e04a      	b.n	8041242 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80411ac:	7bfa      	ldrb	r2, [r7, #15]
 80411ae:	6879      	ldr	r1, [r7, #4]
 80411b0:	4613      	mov	r3, r2
 80411b2:	00db      	lsls	r3, r3, #3
 80411b4:	1a9b      	subs	r3, r3, r2
 80411b6:	009b      	lsls	r3, r3, #2
 80411b8:	440b      	add	r3, r1
 80411ba:	333d      	adds	r3, #61	; 0x3d
 80411bc:	2201      	movs	r2, #1
 80411be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80411c0:	7bfa      	ldrb	r2, [r7, #15]
 80411c2:	6879      	ldr	r1, [r7, #4]
 80411c4:	4613      	mov	r3, r2
 80411c6:	00db      	lsls	r3, r3, #3
 80411c8:	1a9b      	subs	r3, r3, r2
 80411ca:	009b      	lsls	r3, r3, #2
 80411cc:	440b      	add	r3, r1
 80411ce:	333c      	adds	r3, #60	; 0x3c
 80411d0:	7bfa      	ldrb	r2, [r7, #15]
 80411d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80411d4:	7bfa      	ldrb	r2, [r7, #15]
 80411d6:	7bfb      	ldrb	r3, [r7, #15]
 80411d8:	b298      	uxth	r0, r3
 80411da:	6879      	ldr	r1, [r7, #4]
 80411dc:	4613      	mov	r3, r2
 80411de:	00db      	lsls	r3, r3, #3
 80411e0:	1a9b      	subs	r3, r3, r2
 80411e2:	009b      	lsls	r3, r3, #2
 80411e4:	440b      	add	r3, r1
 80411e6:	3342      	adds	r3, #66	; 0x42
 80411e8:	4602      	mov	r2, r0
 80411ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80411ec:	7bfa      	ldrb	r2, [r7, #15]
 80411ee:	6879      	ldr	r1, [r7, #4]
 80411f0:	4613      	mov	r3, r2
 80411f2:	00db      	lsls	r3, r3, #3
 80411f4:	1a9b      	subs	r3, r3, r2
 80411f6:	009b      	lsls	r3, r3, #2
 80411f8:	440b      	add	r3, r1
 80411fa:	333f      	adds	r3, #63	; 0x3f
 80411fc:	2200      	movs	r2, #0
 80411fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8041200:	7bfa      	ldrb	r2, [r7, #15]
 8041202:	6879      	ldr	r1, [r7, #4]
 8041204:	4613      	mov	r3, r2
 8041206:	00db      	lsls	r3, r3, #3
 8041208:	1a9b      	subs	r3, r3, r2
 804120a:	009b      	lsls	r3, r3, #2
 804120c:	440b      	add	r3, r1
 804120e:	3344      	adds	r3, #68	; 0x44
 8041210:	2200      	movs	r2, #0
 8041212:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8041214:	7bfa      	ldrb	r2, [r7, #15]
 8041216:	6879      	ldr	r1, [r7, #4]
 8041218:	4613      	mov	r3, r2
 804121a:	00db      	lsls	r3, r3, #3
 804121c:	1a9b      	subs	r3, r3, r2
 804121e:	009b      	lsls	r3, r3, #2
 8041220:	440b      	add	r3, r1
 8041222:	3348      	adds	r3, #72	; 0x48
 8041224:	2200      	movs	r2, #0
 8041226:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8041228:	7bfa      	ldrb	r2, [r7, #15]
 804122a:	6879      	ldr	r1, [r7, #4]
 804122c:	4613      	mov	r3, r2
 804122e:	00db      	lsls	r3, r3, #3
 8041230:	1a9b      	subs	r3, r3, r2
 8041232:	009b      	lsls	r3, r3, #2
 8041234:	440b      	add	r3, r1
 8041236:	3350      	adds	r3, #80	; 0x50
 8041238:	2200      	movs	r2, #0
 804123a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 804123c:	7bfb      	ldrb	r3, [r7, #15]
 804123e:	3301      	adds	r3, #1
 8041240:	73fb      	strb	r3, [r7, #15]
 8041242:	7bfa      	ldrb	r2, [r7, #15]
 8041244:	687b      	ldr	r3, [r7, #4]
 8041246:	685b      	ldr	r3, [r3, #4]
 8041248:	429a      	cmp	r2, r3
 804124a:	d3af      	bcc.n	80411ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 804124c:	2300      	movs	r3, #0
 804124e:	73fb      	strb	r3, [r7, #15]
 8041250:	e044      	b.n	80412dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8041252:	7bfa      	ldrb	r2, [r7, #15]
 8041254:	6879      	ldr	r1, [r7, #4]
 8041256:	4613      	mov	r3, r2
 8041258:	00db      	lsls	r3, r3, #3
 804125a:	1a9b      	subs	r3, r3, r2
 804125c:	009b      	lsls	r3, r3, #2
 804125e:	440b      	add	r3, r1
 8041260:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8041264:	2200      	movs	r2, #0
 8041266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8041268:	7bfa      	ldrb	r2, [r7, #15]
 804126a:	6879      	ldr	r1, [r7, #4]
 804126c:	4613      	mov	r3, r2
 804126e:	00db      	lsls	r3, r3, #3
 8041270:	1a9b      	subs	r3, r3, r2
 8041272:	009b      	lsls	r3, r3, #2
 8041274:	440b      	add	r3, r1
 8041276:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 804127a:	7bfa      	ldrb	r2, [r7, #15]
 804127c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 804127e:	7bfa      	ldrb	r2, [r7, #15]
 8041280:	6879      	ldr	r1, [r7, #4]
 8041282:	4613      	mov	r3, r2
 8041284:	00db      	lsls	r3, r3, #3
 8041286:	1a9b      	subs	r3, r3, r2
 8041288:	009b      	lsls	r3, r3, #2
 804128a:	440b      	add	r3, r1
 804128c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8041290:	2200      	movs	r2, #0
 8041292:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8041294:	7bfa      	ldrb	r2, [r7, #15]
 8041296:	6879      	ldr	r1, [r7, #4]
 8041298:	4613      	mov	r3, r2
 804129a:	00db      	lsls	r3, r3, #3
 804129c:	1a9b      	subs	r3, r3, r2
 804129e:	009b      	lsls	r3, r3, #2
 80412a0:	440b      	add	r3, r1
 80412a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80412a6:	2200      	movs	r2, #0
 80412a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80412aa:	7bfa      	ldrb	r2, [r7, #15]
 80412ac:	6879      	ldr	r1, [r7, #4]
 80412ae:	4613      	mov	r3, r2
 80412b0:	00db      	lsls	r3, r3, #3
 80412b2:	1a9b      	subs	r3, r3, r2
 80412b4:	009b      	lsls	r3, r3, #2
 80412b6:	440b      	add	r3, r1
 80412b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80412bc:	2200      	movs	r2, #0
 80412be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80412c0:	7bfa      	ldrb	r2, [r7, #15]
 80412c2:	6879      	ldr	r1, [r7, #4]
 80412c4:	4613      	mov	r3, r2
 80412c6:	00db      	lsls	r3, r3, #3
 80412c8:	1a9b      	subs	r3, r3, r2
 80412ca:	009b      	lsls	r3, r3, #2
 80412cc:	440b      	add	r3, r1
 80412ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80412d2:	2200      	movs	r2, #0
 80412d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80412d6:	7bfb      	ldrb	r3, [r7, #15]
 80412d8:	3301      	adds	r3, #1
 80412da:	73fb      	strb	r3, [r7, #15]
 80412dc:	7bfa      	ldrb	r2, [r7, #15]
 80412de:	687b      	ldr	r3, [r7, #4]
 80412e0:	685b      	ldr	r3, [r3, #4]
 80412e2:	429a      	cmp	r2, r3
 80412e4:	d3b5      	bcc.n	8041252 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80412e6:	687b      	ldr	r3, [r7, #4]
 80412e8:	681b      	ldr	r3, [r3, #0]
 80412ea:	603b      	str	r3, [r7, #0]
 80412ec:	687e      	ldr	r6, [r7, #4]
 80412ee:	466d      	mov	r5, sp
 80412f0:	f106 0410 	add.w	r4, r6, #16
 80412f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80412f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80412f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80412fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80412fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8041300:	e885 0003 	stmia.w	r5, {r0, r1}
 8041304:	1d33      	adds	r3, r6, #4
 8041306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8041308:	6838      	ldr	r0, [r7, #0]
 804130a:	f001 fa39 	bl	8042780 <USB_DevInit>
 804130e:	4603      	mov	r3, r0
 8041310:	2b00      	cmp	r3, #0
 8041312:	d005      	beq.n	8041320 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8041314:	687b      	ldr	r3, [r7, #4]
 8041316:	2202      	movs	r2, #2
 8041318:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 804131c:	2301      	movs	r3, #1
 804131e:	e014      	b.n	804134a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8041320:	687b      	ldr	r3, [r7, #4]
 8041322:	2200      	movs	r2, #0
 8041324:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8041328:	687b      	ldr	r3, [r7, #4]
 804132a:	2201      	movs	r2, #1
 804132c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8041330:	687b      	ldr	r3, [r7, #4]
 8041332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041334:	2b01      	cmp	r3, #1
 8041336:	d102      	bne.n	804133e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8041338:	6878      	ldr	r0, [r7, #4]
 804133a:	f000 f80a 	bl	8041352 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 804133e:	687b      	ldr	r3, [r7, #4]
 8041340:	681b      	ldr	r3, [r3, #0]
 8041342:	4618      	mov	r0, r3
 8041344:	f001 fbd7 	bl	8042af6 <USB_DevDisconnect>

  return HAL_OK;
 8041348:	2300      	movs	r3, #0
}
 804134a:	4618      	mov	r0, r3
 804134c:	3714      	adds	r7, #20
 804134e:	46bd      	mov	sp, r7
 8041350:	bdf0      	pop	{r4, r5, r6, r7, pc}

08041352 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8041352:	b480      	push	{r7}
 8041354:	b085      	sub	sp, #20
 8041356:	af00      	add	r7, sp, #0
 8041358:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 804135a:	687b      	ldr	r3, [r7, #4]
 804135c:	681b      	ldr	r3, [r3, #0]
 804135e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8041360:	687b      	ldr	r3, [r7, #4]
 8041362:	2201      	movs	r2, #1
 8041364:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8041368:	687b      	ldr	r3, [r7, #4]
 804136a:	2200      	movs	r2, #0
 804136c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8041370:	68fb      	ldr	r3, [r7, #12]
 8041372:	699b      	ldr	r3, [r3, #24]
 8041374:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8041378:	68fb      	ldr	r3, [r7, #12]
 804137a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 804137c:	68fb      	ldr	r3, [r7, #12]
 804137e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041384:	f043 0303 	orr.w	r3, r3, #3
 8041388:	68fa      	ldr	r2, [r7, #12]
 804138a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 804138c:	2300      	movs	r3, #0
}
 804138e:	4618      	mov	r0, r3
 8041390:	3714      	adds	r7, #20
 8041392:	46bd      	mov	sp, r7
 8041394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041398:	4770      	bx	lr
	...

0804139c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 804139c:	b580      	push	{r7, lr}
 804139e:	b084      	sub	sp, #16
 80413a0:	af00      	add	r7, sp, #0
 80413a2:	6078      	str	r0, [r7, #4]
 80413a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80413a6:	687b      	ldr	r3, [r7, #4]
 80413a8:	2b00      	cmp	r3, #0
 80413aa:	d101      	bne.n	80413b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80413ac:	2301      	movs	r3, #1
 80413ae:	e0cc      	b.n	804154a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80413b0:	4b68      	ldr	r3, [pc, #416]	; (8041554 <HAL_RCC_ClockConfig+0x1b8>)
 80413b2:	681b      	ldr	r3, [r3, #0]
 80413b4:	f003 0307 	and.w	r3, r3, #7
 80413b8:	683a      	ldr	r2, [r7, #0]
 80413ba:	429a      	cmp	r2, r3
 80413bc:	d90c      	bls.n	80413d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80413be:	4b65      	ldr	r3, [pc, #404]	; (8041554 <HAL_RCC_ClockConfig+0x1b8>)
 80413c0:	683a      	ldr	r2, [r7, #0]
 80413c2:	b2d2      	uxtb	r2, r2
 80413c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80413c6:	4b63      	ldr	r3, [pc, #396]	; (8041554 <HAL_RCC_ClockConfig+0x1b8>)
 80413c8:	681b      	ldr	r3, [r3, #0]
 80413ca:	f003 0307 	and.w	r3, r3, #7
 80413ce:	683a      	ldr	r2, [r7, #0]
 80413d0:	429a      	cmp	r2, r3
 80413d2:	d001      	beq.n	80413d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80413d4:	2301      	movs	r3, #1
 80413d6:	e0b8      	b.n	804154a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80413d8:	687b      	ldr	r3, [r7, #4]
 80413da:	681b      	ldr	r3, [r3, #0]
 80413dc:	f003 0302 	and.w	r3, r3, #2
 80413e0:	2b00      	cmp	r3, #0
 80413e2:	d020      	beq.n	8041426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80413e4:	687b      	ldr	r3, [r7, #4]
 80413e6:	681b      	ldr	r3, [r3, #0]
 80413e8:	f003 0304 	and.w	r3, r3, #4
 80413ec:	2b00      	cmp	r3, #0
 80413ee:	d005      	beq.n	80413fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80413f0:	4b59      	ldr	r3, [pc, #356]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 80413f2:	689b      	ldr	r3, [r3, #8]
 80413f4:	4a58      	ldr	r2, [pc, #352]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 80413f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80413fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80413fc:	687b      	ldr	r3, [r7, #4]
 80413fe:	681b      	ldr	r3, [r3, #0]
 8041400:	f003 0308 	and.w	r3, r3, #8
 8041404:	2b00      	cmp	r3, #0
 8041406:	d005      	beq.n	8041414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8041408:	4b53      	ldr	r3, [pc, #332]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 804140a:	689b      	ldr	r3, [r3, #8]
 804140c:	4a52      	ldr	r2, [pc, #328]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 804140e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8041412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041414:	4b50      	ldr	r3, [pc, #320]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 8041416:	689b      	ldr	r3, [r3, #8]
 8041418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 804141c:	687b      	ldr	r3, [r7, #4]
 804141e:	689b      	ldr	r3, [r3, #8]
 8041420:	494d      	ldr	r1, [pc, #308]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 8041422:	4313      	orrs	r3, r2
 8041424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8041426:	687b      	ldr	r3, [r7, #4]
 8041428:	681b      	ldr	r3, [r3, #0]
 804142a:	f003 0301 	and.w	r3, r3, #1
 804142e:	2b00      	cmp	r3, #0
 8041430:	d044      	beq.n	80414bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041432:	687b      	ldr	r3, [r7, #4]
 8041434:	685b      	ldr	r3, [r3, #4]
 8041436:	2b01      	cmp	r3, #1
 8041438:	d107      	bne.n	804144a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804143a:	4b47      	ldr	r3, [pc, #284]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 804143c:	681b      	ldr	r3, [r3, #0]
 804143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041442:	2b00      	cmp	r3, #0
 8041444:	d119      	bne.n	804147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8041446:	2301      	movs	r3, #1
 8041448:	e07f      	b.n	804154a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804144a:	687b      	ldr	r3, [r7, #4]
 804144c:	685b      	ldr	r3, [r3, #4]
 804144e:	2b02      	cmp	r3, #2
 8041450:	d003      	beq.n	804145a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8041452:	687b      	ldr	r3, [r7, #4]
 8041454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8041456:	2b03      	cmp	r3, #3
 8041458:	d107      	bne.n	804146a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804145a:	4b3f      	ldr	r3, [pc, #252]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 804145c:	681b      	ldr	r3, [r3, #0]
 804145e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041462:	2b00      	cmp	r3, #0
 8041464:	d109      	bne.n	804147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8041466:	2301      	movs	r3, #1
 8041468:	e06f      	b.n	804154a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804146a:	4b3b      	ldr	r3, [pc, #236]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 804146c:	681b      	ldr	r3, [r3, #0]
 804146e:	f003 0302 	and.w	r3, r3, #2
 8041472:	2b00      	cmp	r3, #0
 8041474:	d101      	bne.n	804147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8041476:	2301      	movs	r3, #1
 8041478:	e067      	b.n	804154a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804147a:	4b37      	ldr	r3, [pc, #220]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 804147c:	689b      	ldr	r3, [r3, #8]
 804147e:	f023 0203 	bic.w	r2, r3, #3
 8041482:	687b      	ldr	r3, [r7, #4]
 8041484:	685b      	ldr	r3, [r3, #4]
 8041486:	4934      	ldr	r1, [pc, #208]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 8041488:	4313      	orrs	r3, r2
 804148a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 804148c:	f7ff fb7a 	bl	8040b84 <HAL_GetTick>
 8041490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041492:	e00a      	b.n	80414aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041494:	f7ff fb76 	bl	8040b84 <HAL_GetTick>
 8041498:	4602      	mov	r2, r0
 804149a:	68fb      	ldr	r3, [r7, #12]
 804149c:	1ad3      	subs	r3, r2, r3
 804149e:	f241 3288 	movw	r2, #5000	; 0x1388
 80414a2:	4293      	cmp	r3, r2
 80414a4:	d901      	bls.n	80414aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80414a6:	2303      	movs	r3, #3
 80414a8:	e04f      	b.n	804154a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80414aa:	4b2b      	ldr	r3, [pc, #172]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 80414ac:	689b      	ldr	r3, [r3, #8]
 80414ae:	f003 020c 	and.w	r2, r3, #12
 80414b2:	687b      	ldr	r3, [r7, #4]
 80414b4:	685b      	ldr	r3, [r3, #4]
 80414b6:	009b      	lsls	r3, r3, #2
 80414b8:	429a      	cmp	r2, r3
 80414ba:	d1eb      	bne.n	8041494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80414bc:	4b25      	ldr	r3, [pc, #148]	; (8041554 <HAL_RCC_ClockConfig+0x1b8>)
 80414be:	681b      	ldr	r3, [r3, #0]
 80414c0:	f003 0307 	and.w	r3, r3, #7
 80414c4:	683a      	ldr	r2, [r7, #0]
 80414c6:	429a      	cmp	r2, r3
 80414c8:	d20c      	bcs.n	80414e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80414ca:	4b22      	ldr	r3, [pc, #136]	; (8041554 <HAL_RCC_ClockConfig+0x1b8>)
 80414cc:	683a      	ldr	r2, [r7, #0]
 80414ce:	b2d2      	uxtb	r2, r2
 80414d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80414d2:	4b20      	ldr	r3, [pc, #128]	; (8041554 <HAL_RCC_ClockConfig+0x1b8>)
 80414d4:	681b      	ldr	r3, [r3, #0]
 80414d6:	f003 0307 	and.w	r3, r3, #7
 80414da:	683a      	ldr	r2, [r7, #0]
 80414dc:	429a      	cmp	r2, r3
 80414de:	d001      	beq.n	80414e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80414e0:	2301      	movs	r3, #1
 80414e2:	e032      	b.n	804154a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80414e4:	687b      	ldr	r3, [r7, #4]
 80414e6:	681b      	ldr	r3, [r3, #0]
 80414e8:	f003 0304 	and.w	r3, r3, #4
 80414ec:	2b00      	cmp	r3, #0
 80414ee:	d008      	beq.n	8041502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80414f0:	4b19      	ldr	r3, [pc, #100]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 80414f2:	689b      	ldr	r3, [r3, #8]
 80414f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80414f8:	687b      	ldr	r3, [r7, #4]
 80414fa:	68db      	ldr	r3, [r3, #12]
 80414fc:	4916      	ldr	r1, [pc, #88]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 80414fe:	4313      	orrs	r3, r2
 8041500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041502:	687b      	ldr	r3, [r7, #4]
 8041504:	681b      	ldr	r3, [r3, #0]
 8041506:	f003 0308 	and.w	r3, r3, #8
 804150a:	2b00      	cmp	r3, #0
 804150c:	d009      	beq.n	8041522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 804150e:	4b12      	ldr	r3, [pc, #72]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 8041510:	689b      	ldr	r3, [r3, #8]
 8041512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8041516:	687b      	ldr	r3, [r7, #4]
 8041518:	691b      	ldr	r3, [r3, #16]
 804151a:	00db      	lsls	r3, r3, #3
 804151c:	490e      	ldr	r1, [pc, #56]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 804151e:	4313      	orrs	r3, r2
 8041520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8041522:	f000 f821 	bl	8041568 <HAL_RCC_GetSysClockFreq>
 8041526:	4602      	mov	r2, r0
 8041528:	4b0b      	ldr	r3, [pc, #44]	; (8041558 <HAL_RCC_ClockConfig+0x1bc>)
 804152a:	689b      	ldr	r3, [r3, #8]
 804152c:	091b      	lsrs	r3, r3, #4
 804152e:	f003 030f 	and.w	r3, r3, #15
 8041532:	490a      	ldr	r1, [pc, #40]	; (804155c <HAL_RCC_ClockConfig+0x1c0>)
 8041534:	5ccb      	ldrb	r3, [r1, r3]
 8041536:	fa22 f303 	lsr.w	r3, r2, r3
 804153a:	4a09      	ldr	r2, [pc, #36]	; (8041560 <HAL_RCC_ClockConfig+0x1c4>)
 804153c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 804153e:	4b09      	ldr	r3, [pc, #36]	; (8041564 <HAL_RCC_ClockConfig+0x1c8>)
 8041540:	681b      	ldr	r3, [r3, #0]
 8041542:	4618      	mov	r0, r3
 8041544:	f7ff fada 	bl	8040afc <HAL_InitTick>

  return HAL_OK;
 8041548:	2300      	movs	r3, #0
}
 804154a:	4618      	mov	r0, r3
 804154c:	3710      	adds	r7, #16
 804154e:	46bd      	mov	sp, r7
 8041550:	bd80      	pop	{r7, pc}
 8041552:	bf00      	nop
 8041554:	40023c00 	.word	0x40023c00
 8041558:	40023800 	.word	0x40023800
 804155c:	08042c28 	.word	0x08042c28
 8041560:	20000000 	.word	0x20000000
 8041564:	20000004 	.word	0x20000004

08041568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8041568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 804156c:	b094      	sub	sp, #80	; 0x50
 804156e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8041570:	2300      	movs	r3, #0
 8041572:	647b      	str	r3, [r7, #68]	; 0x44
 8041574:	2300      	movs	r3, #0
 8041576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8041578:	2300      	movs	r3, #0
 804157a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 804157c:	2300      	movs	r3, #0
 804157e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8041580:	4b79      	ldr	r3, [pc, #484]	; (8041768 <HAL_RCC_GetSysClockFreq+0x200>)
 8041582:	689b      	ldr	r3, [r3, #8]
 8041584:	f003 030c 	and.w	r3, r3, #12
 8041588:	2b08      	cmp	r3, #8
 804158a:	d00d      	beq.n	80415a8 <HAL_RCC_GetSysClockFreq+0x40>
 804158c:	2b08      	cmp	r3, #8
 804158e:	f200 80e1 	bhi.w	8041754 <HAL_RCC_GetSysClockFreq+0x1ec>
 8041592:	2b00      	cmp	r3, #0
 8041594:	d002      	beq.n	804159c <HAL_RCC_GetSysClockFreq+0x34>
 8041596:	2b04      	cmp	r3, #4
 8041598:	d003      	beq.n	80415a2 <HAL_RCC_GetSysClockFreq+0x3a>
 804159a:	e0db      	b.n	8041754 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 804159c:	4b73      	ldr	r3, [pc, #460]	; (804176c <HAL_RCC_GetSysClockFreq+0x204>)
 804159e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80415a0:	e0db      	b.n	804175a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80415a2:	4b73      	ldr	r3, [pc, #460]	; (8041770 <HAL_RCC_GetSysClockFreq+0x208>)
 80415a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80415a6:	e0d8      	b.n	804175a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80415a8:	4b6f      	ldr	r3, [pc, #444]	; (8041768 <HAL_RCC_GetSysClockFreq+0x200>)
 80415aa:	685b      	ldr	r3, [r3, #4]
 80415ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80415b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80415b2:	4b6d      	ldr	r3, [pc, #436]	; (8041768 <HAL_RCC_GetSysClockFreq+0x200>)
 80415b4:	685b      	ldr	r3, [r3, #4]
 80415b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80415ba:	2b00      	cmp	r3, #0
 80415bc:	d063      	beq.n	8041686 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80415be:	4b6a      	ldr	r3, [pc, #424]	; (8041768 <HAL_RCC_GetSysClockFreq+0x200>)
 80415c0:	685b      	ldr	r3, [r3, #4]
 80415c2:	099b      	lsrs	r3, r3, #6
 80415c4:	2200      	movs	r2, #0
 80415c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80415c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80415ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80415cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80415d0:	633b      	str	r3, [r7, #48]	; 0x30
 80415d2:	2300      	movs	r3, #0
 80415d4:	637b      	str	r3, [r7, #52]	; 0x34
 80415d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80415da:	4622      	mov	r2, r4
 80415dc:	462b      	mov	r3, r5
 80415de:	f04f 0000 	mov.w	r0, #0
 80415e2:	f04f 0100 	mov.w	r1, #0
 80415e6:	0159      	lsls	r1, r3, #5
 80415e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80415ec:	0150      	lsls	r0, r2, #5
 80415ee:	4602      	mov	r2, r0
 80415f0:	460b      	mov	r3, r1
 80415f2:	4621      	mov	r1, r4
 80415f4:	1a51      	subs	r1, r2, r1
 80415f6:	6139      	str	r1, [r7, #16]
 80415f8:	4629      	mov	r1, r5
 80415fa:	eb63 0301 	sbc.w	r3, r3, r1
 80415fe:	617b      	str	r3, [r7, #20]
 8041600:	f04f 0200 	mov.w	r2, #0
 8041604:	f04f 0300 	mov.w	r3, #0
 8041608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 804160c:	4659      	mov	r1, fp
 804160e:	018b      	lsls	r3, r1, #6
 8041610:	4651      	mov	r1, sl
 8041612:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8041616:	4651      	mov	r1, sl
 8041618:	018a      	lsls	r2, r1, #6
 804161a:	4651      	mov	r1, sl
 804161c:	ebb2 0801 	subs.w	r8, r2, r1
 8041620:	4659      	mov	r1, fp
 8041622:	eb63 0901 	sbc.w	r9, r3, r1
 8041626:	f04f 0200 	mov.w	r2, #0
 804162a:	f04f 0300 	mov.w	r3, #0
 804162e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8041632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8041636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 804163a:	4690      	mov	r8, r2
 804163c:	4699      	mov	r9, r3
 804163e:	4623      	mov	r3, r4
 8041640:	eb18 0303 	adds.w	r3, r8, r3
 8041644:	60bb      	str	r3, [r7, #8]
 8041646:	462b      	mov	r3, r5
 8041648:	eb49 0303 	adc.w	r3, r9, r3
 804164c:	60fb      	str	r3, [r7, #12]
 804164e:	f04f 0200 	mov.w	r2, #0
 8041652:	f04f 0300 	mov.w	r3, #0
 8041656:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 804165a:	4629      	mov	r1, r5
 804165c:	024b      	lsls	r3, r1, #9
 804165e:	4621      	mov	r1, r4
 8041660:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8041664:	4621      	mov	r1, r4
 8041666:	024a      	lsls	r2, r1, #9
 8041668:	4610      	mov	r0, r2
 804166a:	4619      	mov	r1, r3
 804166c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804166e:	2200      	movs	r2, #0
 8041670:	62bb      	str	r3, [r7, #40]	; 0x28
 8041672:	62fa      	str	r2, [r7, #44]	; 0x2c
 8041674:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8041678:	f7fe fdc4 	bl	8040204 <__aeabi_uldivmod>
 804167c:	4602      	mov	r2, r0
 804167e:	460b      	mov	r3, r1
 8041680:	4613      	mov	r3, r2
 8041682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8041684:	e058      	b.n	8041738 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8041686:	4b38      	ldr	r3, [pc, #224]	; (8041768 <HAL_RCC_GetSysClockFreq+0x200>)
 8041688:	685b      	ldr	r3, [r3, #4]
 804168a:	099b      	lsrs	r3, r3, #6
 804168c:	2200      	movs	r2, #0
 804168e:	4618      	mov	r0, r3
 8041690:	4611      	mov	r1, r2
 8041692:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8041696:	623b      	str	r3, [r7, #32]
 8041698:	2300      	movs	r3, #0
 804169a:	627b      	str	r3, [r7, #36]	; 0x24
 804169c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80416a0:	4642      	mov	r2, r8
 80416a2:	464b      	mov	r3, r9
 80416a4:	f04f 0000 	mov.w	r0, #0
 80416a8:	f04f 0100 	mov.w	r1, #0
 80416ac:	0159      	lsls	r1, r3, #5
 80416ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80416b2:	0150      	lsls	r0, r2, #5
 80416b4:	4602      	mov	r2, r0
 80416b6:	460b      	mov	r3, r1
 80416b8:	4641      	mov	r1, r8
 80416ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80416be:	4649      	mov	r1, r9
 80416c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80416c4:	f04f 0200 	mov.w	r2, #0
 80416c8:	f04f 0300 	mov.w	r3, #0
 80416cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80416d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80416d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80416d8:	ebb2 040a 	subs.w	r4, r2, sl
 80416dc:	eb63 050b 	sbc.w	r5, r3, fp
 80416e0:	f04f 0200 	mov.w	r2, #0
 80416e4:	f04f 0300 	mov.w	r3, #0
 80416e8:	00eb      	lsls	r3, r5, #3
 80416ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80416ee:	00e2      	lsls	r2, r4, #3
 80416f0:	4614      	mov	r4, r2
 80416f2:	461d      	mov	r5, r3
 80416f4:	4643      	mov	r3, r8
 80416f6:	18e3      	adds	r3, r4, r3
 80416f8:	603b      	str	r3, [r7, #0]
 80416fa:	464b      	mov	r3, r9
 80416fc:	eb45 0303 	adc.w	r3, r5, r3
 8041700:	607b      	str	r3, [r7, #4]
 8041702:	f04f 0200 	mov.w	r2, #0
 8041706:	f04f 0300 	mov.w	r3, #0
 804170a:	e9d7 4500 	ldrd	r4, r5, [r7]
 804170e:	4629      	mov	r1, r5
 8041710:	028b      	lsls	r3, r1, #10
 8041712:	4621      	mov	r1, r4
 8041714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8041718:	4621      	mov	r1, r4
 804171a:	028a      	lsls	r2, r1, #10
 804171c:	4610      	mov	r0, r2
 804171e:	4619      	mov	r1, r3
 8041720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8041722:	2200      	movs	r2, #0
 8041724:	61bb      	str	r3, [r7, #24]
 8041726:	61fa      	str	r2, [r7, #28]
 8041728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 804172c:	f7fe fd6a 	bl	8040204 <__aeabi_uldivmod>
 8041730:	4602      	mov	r2, r0
 8041732:	460b      	mov	r3, r1
 8041734:	4613      	mov	r3, r2
 8041736:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8041738:	4b0b      	ldr	r3, [pc, #44]	; (8041768 <HAL_RCC_GetSysClockFreq+0x200>)
 804173a:	685b      	ldr	r3, [r3, #4]
 804173c:	0c1b      	lsrs	r3, r3, #16
 804173e:	f003 0303 	and.w	r3, r3, #3
 8041742:	3301      	adds	r3, #1
 8041744:	005b      	lsls	r3, r3, #1
 8041746:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8041748:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 804174a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804174c:	fbb2 f3f3 	udiv	r3, r2, r3
 8041750:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8041752:	e002      	b.n	804175a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8041754:	4b05      	ldr	r3, [pc, #20]	; (804176c <HAL_RCC_GetSysClockFreq+0x204>)
 8041756:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8041758:	bf00      	nop
    }
  }
  return sysclockfreq;
 804175a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 804175c:	4618      	mov	r0, r3
 804175e:	3750      	adds	r7, #80	; 0x50
 8041760:	46bd      	mov	sp, r7
 8041762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8041766:	bf00      	nop
 8041768:	40023800 	.word	0x40023800
 804176c:	00f42400 	.word	0x00f42400
 8041770:	007a1200 	.word	0x007a1200

08041774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041774:	b480      	push	{r7}
 8041776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8041778:	4b03      	ldr	r3, [pc, #12]	; (8041788 <HAL_RCC_GetHCLKFreq+0x14>)
 804177a:	681b      	ldr	r3, [r3, #0]
}
 804177c:	4618      	mov	r0, r3
 804177e:	46bd      	mov	sp, r7
 8041780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041784:	4770      	bx	lr
 8041786:	bf00      	nop
 8041788:	20000000 	.word	0x20000000

0804178c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 804178c:	b580      	push	{r7, lr}
 804178e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8041790:	f7ff fff0 	bl	8041774 <HAL_RCC_GetHCLKFreq>
 8041794:	4602      	mov	r2, r0
 8041796:	4b05      	ldr	r3, [pc, #20]	; (80417ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8041798:	689b      	ldr	r3, [r3, #8]
 804179a:	0a9b      	lsrs	r3, r3, #10
 804179c:	f003 0307 	and.w	r3, r3, #7
 80417a0:	4903      	ldr	r1, [pc, #12]	; (80417b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80417a2:	5ccb      	ldrb	r3, [r1, r3]
 80417a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80417a8:	4618      	mov	r0, r3
 80417aa:	bd80      	pop	{r7, pc}
 80417ac:	40023800 	.word	0x40023800
 80417b0:	08042c38 	.word	0x08042c38

080417b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80417b4:	b580      	push	{r7, lr}
 80417b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80417b8:	f7ff ffdc 	bl	8041774 <HAL_RCC_GetHCLKFreq>
 80417bc:	4602      	mov	r2, r0
 80417be:	4b05      	ldr	r3, [pc, #20]	; (80417d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80417c0:	689b      	ldr	r3, [r3, #8]
 80417c2:	0b5b      	lsrs	r3, r3, #13
 80417c4:	f003 0307 	and.w	r3, r3, #7
 80417c8:	4903      	ldr	r1, [pc, #12]	; (80417d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80417ca:	5ccb      	ldrb	r3, [r1, r3]
 80417cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80417d0:	4618      	mov	r0, r3
 80417d2:	bd80      	pop	{r7, pc}
 80417d4:	40023800 	.word	0x40023800
 80417d8:	08042c38 	.word	0x08042c38

080417dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80417dc:	b580      	push	{r7, lr}
 80417de:	b086      	sub	sp, #24
 80417e0:	af00      	add	r7, sp, #0
 80417e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80417e4:	2300      	movs	r3, #0
 80417e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80417e8:	2300      	movs	r3, #0
 80417ea:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80417ec:	2300      	movs	r3, #0
 80417ee:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80417f0:	687b      	ldr	r3, [r7, #4]
 80417f2:	681b      	ldr	r3, [r3, #0]
 80417f4:	f003 0301 	and.w	r3, r3, #1
 80417f8:	2b00      	cmp	r3, #0
 80417fa:	d010      	beq.n	804181e <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80417fc:	4b87      	ldr	r3, [pc, #540]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80417fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041802:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8041806:	687b      	ldr	r3, [r7, #4]
 8041808:	695b      	ldr	r3, [r3, #20]
 804180a:	4984      	ldr	r1, [pc, #528]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 804180c:	4313      	orrs	r3, r2
 804180e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8041812:	687b      	ldr	r3, [r7, #4]
 8041814:	695b      	ldr	r3, [r3, #20]
 8041816:	2b00      	cmp	r3, #0
 8041818:	d101      	bne.n	804181e <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 804181a:	2301      	movs	r3, #1
 804181c:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 804181e:	687b      	ldr	r3, [r7, #4]
 8041820:	681b      	ldr	r3, [r3, #0]
 8041822:	f003 0302 	and.w	r3, r3, #2
 8041826:	2b00      	cmp	r3, #0
 8041828:	d010      	beq.n	804184c <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 804182a:	4b7c      	ldr	r3, [pc, #496]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 804182c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041830:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8041834:	687b      	ldr	r3, [r7, #4]
 8041836:	699b      	ldr	r3, [r3, #24]
 8041838:	4978      	ldr	r1, [pc, #480]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 804183a:	4313      	orrs	r3, r2
 804183c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8041840:	687b      	ldr	r3, [r7, #4]
 8041842:	699b      	ldr	r3, [r3, #24]
 8041844:	2b00      	cmp	r3, #0
 8041846:	d101      	bne.n	804184c <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8041848:	2301      	movs	r3, #1
 804184a:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 804184c:	687b      	ldr	r3, [r7, #4]
 804184e:	681b      	ldr	r3, [r3, #0]
 8041850:	f003 0308 	and.w	r3, r3, #8
 8041854:	2b00      	cmp	r3, #0
 8041856:	f000 8083 	beq.w	8041960 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 804185a:	2300      	movs	r3, #0
 804185c:	60bb      	str	r3, [r7, #8]
 804185e:	4b6f      	ldr	r3, [pc, #444]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8041860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041862:	4a6e      	ldr	r2, [pc, #440]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8041864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041868:	6413      	str	r3, [r2, #64]	; 0x40
 804186a:	4b6c      	ldr	r3, [pc, #432]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 804186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041872:	60bb      	str	r3, [r7, #8]
 8041874:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8041876:	4b6a      	ldr	r3, [pc, #424]	; (8041a20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8041878:	681b      	ldr	r3, [r3, #0]
 804187a:	4a69      	ldr	r2, [pc, #420]	; (8041a20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 804187c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041880:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8041882:	f7ff f97f 	bl	8040b84 <HAL_GetTick>
 8041886:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8041888:	e008      	b.n	804189c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 804188a:	f7ff f97b 	bl	8040b84 <HAL_GetTick>
 804188e:	4602      	mov	r2, r0
 8041890:	693b      	ldr	r3, [r7, #16]
 8041892:	1ad3      	subs	r3, r2, r3
 8041894:	2b02      	cmp	r3, #2
 8041896:	d901      	bls.n	804189c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8041898:	2303      	movs	r3, #3
 804189a:	e162      	b.n	8041b62 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 804189c:	4b60      	ldr	r3, [pc, #384]	; (8041a20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 804189e:	681b      	ldr	r3, [r3, #0]
 80418a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80418a4:	2b00      	cmp	r3, #0
 80418a6:	d0f0      	beq.n	804188a <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80418a8:	4b5c      	ldr	r3, [pc, #368]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80418aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80418ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80418b0:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80418b2:	68fb      	ldr	r3, [r7, #12]
 80418b4:	2b00      	cmp	r3, #0
 80418b6:	d02f      	beq.n	8041918 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80418b8:	687b      	ldr	r3, [r7, #4]
 80418ba:	69db      	ldr	r3, [r3, #28]
 80418bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80418c0:	68fa      	ldr	r2, [r7, #12]
 80418c2:	429a      	cmp	r2, r3
 80418c4:	d028      	beq.n	8041918 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80418c6:	4b55      	ldr	r3, [pc, #340]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80418c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80418ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80418ce:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80418d0:	4b54      	ldr	r3, [pc, #336]	; (8041a24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80418d2:	2201      	movs	r2, #1
 80418d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80418d6:	4b53      	ldr	r3, [pc, #332]	; (8041a24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80418d8:	2200      	movs	r2, #0
 80418da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80418dc:	4a4f      	ldr	r2, [pc, #316]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80418de:	68fb      	ldr	r3, [r7, #12]
 80418e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80418e2:	4b4e      	ldr	r3, [pc, #312]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80418e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80418e6:	f003 0301 	and.w	r3, r3, #1
 80418ea:	2b01      	cmp	r3, #1
 80418ec:	d114      	bne.n	8041918 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80418ee:	f7ff f949 	bl	8040b84 <HAL_GetTick>
 80418f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80418f4:	e00a      	b.n	804190c <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80418f6:	f7ff f945 	bl	8040b84 <HAL_GetTick>
 80418fa:	4602      	mov	r2, r0
 80418fc:	693b      	ldr	r3, [r7, #16]
 80418fe:	1ad3      	subs	r3, r2, r3
 8041900:	f241 3288 	movw	r2, #5000	; 0x1388
 8041904:	4293      	cmp	r3, r2
 8041906:	d901      	bls.n	804190c <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8041908:	2303      	movs	r3, #3
 804190a:	e12a      	b.n	8041b62 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804190c:	4b43      	ldr	r3, [pc, #268]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 804190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041910:	f003 0302 	and.w	r3, r3, #2
 8041914:	2b00      	cmp	r3, #0
 8041916:	d0ee      	beq.n	80418f6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8041918:	687b      	ldr	r3, [r7, #4]
 804191a:	69db      	ldr	r3, [r3, #28]
 804191c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8041924:	d10d      	bne.n	8041942 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8041926:	4b3d      	ldr	r3, [pc, #244]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8041928:	689b      	ldr	r3, [r3, #8]
 804192a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 804192e:	687b      	ldr	r3, [r7, #4]
 8041930:	69db      	ldr	r3, [r3, #28]
 8041932:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8041936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804193a:	4938      	ldr	r1, [pc, #224]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 804193c:	4313      	orrs	r3, r2
 804193e:	608b      	str	r3, [r1, #8]
 8041940:	e005      	b.n	804194e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8041942:	4b36      	ldr	r3, [pc, #216]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8041944:	689b      	ldr	r3, [r3, #8]
 8041946:	4a35      	ldr	r2, [pc, #212]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8041948:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 804194c:	6093      	str	r3, [r2, #8]
 804194e:	4b33      	ldr	r3, [pc, #204]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8041950:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8041952:	687b      	ldr	r3, [r7, #4]
 8041954:	69db      	ldr	r3, [r3, #28]
 8041956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804195a:	4930      	ldr	r1, [pc, #192]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 804195c:	4313      	orrs	r3, r2
 804195e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8041960:	687b      	ldr	r3, [r7, #4]
 8041962:	681b      	ldr	r3, [r3, #0]
 8041964:	f003 0304 	and.w	r3, r3, #4
 8041968:	2b00      	cmp	r3, #0
 804196a:	d004      	beq.n	8041976 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 804196c:	687b      	ldr	r3, [r7, #4]
 804196e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8041972:	4b2d      	ldr	r3, [pc, #180]	; (8041a28 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8041974:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8041976:	687b      	ldr	r3, [r7, #4]
 8041978:	681b      	ldr	r3, [r3, #0]
 804197a:	f003 0310 	and.w	r3, r3, #16
 804197e:	2b00      	cmp	r3, #0
 8041980:	d00a      	beq.n	8041998 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8041982:	4b26      	ldr	r3, [pc, #152]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8041984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041988:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 804198c:	687b      	ldr	r3, [r7, #4]
 804198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041990:	4922      	ldr	r1, [pc, #136]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8041992:	4313      	orrs	r3, r2
 8041994:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8041998:	687b      	ldr	r3, [r7, #4]
 804199a:	681b      	ldr	r3, [r3, #0]
 804199c:	f003 0320 	and.w	r3, r3, #32
 80419a0:	2b00      	cmp	r3, #0
 80419a2:	d011      	beq.n	80419c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80419a4:	4b1d      	ldr	r3, [pc, #116]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80419a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80419aa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80419ae:	687b      	ldr	r3, [r7, #4]
 80419b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80419b2:	491a      	ldr	r1, [pc, #104]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80419b4:	4313      	orrs	r3, r2
 80419b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80419ba:	687b      	ldr	r3, [r7, #4]
 80419bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80419be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80419c2:	d101      	bne.n	80419c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 80419c4:	2301      	movs	r3, #1
 80419c6:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80419c8:	687b      	ldr	r3, [r7, #4]
 80419ca:	681b      	ldr	r3, [r3, #0]
 80419cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80419d0:	2b00      	cmp	r3, #0
 80419d2:	d00a      	beq.n	80419ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80419d4:	4b11      	ldr	r3, [pc, #68]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80419d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80419da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80419de:	687b      	ldr	r3, [r7, #4]
 80419e0:	6a1b      	ldr	r3, [r3, #32]
 80419e2:	490e      	ldr	r1, [pc, #56]	; (8041a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80419e4:	4313      	orrs	r3, r2
 80419e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80419ea:	697b      	ldr	r3, [r7, #20]
 80419ec:	2b01      	cmp	r3, #1
 80419ee:	d004      	beq.n	80419fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80419f0:	687b      	ldr	r3, [r7, #4]
 80419f2:	681b      	ldr	r3, [r3, #0]
 80419f4:	2b80      	cmp	r3, #128	; 0x80
 80419f6:	f040 8091 	bne.w	8041b1c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80419fa:	4b0c      	ldr	r3, [pc, #48]	; (8041a2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80419fc:	2200      	movs	r2, #0
 80419fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8041a00:	f7ff f8c0 	bl	8040b84 <HAL_GetTick>
 8041a04:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8041a06:	e013      	b.n	8041a30 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8041a08:	f7ff f8bc 	bl	8040b84 <HAL_GetTick>
 8041a0c:	4602      	mov	r2, r0
 8041a0e:	693b      	ldr	r3, [r7, #16]
 8041a10:	1ad3      	subs	r3, r2, r3
 8041a12:	2b02      	cmp	r3, #2
 8041a14:	d90c      	bls.n	8041a30 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8041a16:	2303      	movs	r3, #3
 8041a18:	e0a3      	b.n	8041b62 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8041a1a:	bf00      	nop
 8041a1c:	40023800 	.word	0x40023800
 8041a20:	40007000 	.word	0x40007000
 8041a24:	42470e40 	.word	0x42470e40
 8041a28:	424711e0 	.word	0x424711e0
 8041a2c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8041a30:	4b4e      	ldr	r3, [pc, #312]	; (8041b6c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8041a32:	681b      	ldr	r3, [r3, #0]
 8041a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041a38:	2b00      	cmp	r3, #0
 8041a3a:	d1e5      	bne.n	8041a08 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8041a3c:	4a4c      	ldr	r2, [pc, #304]	; (8041b70 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8041a3e:	687b      	ldr	r3, [r7, #4]
 8041a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041a42:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8041a44:	687b      	ldr	r3, [r7, #4]
 8041a46:	681b      	ldr	r3, [r3, #0]
 8041a48:	f003 0301 	and.w	r3, r3, #1
 8041a4c:	2b00      	cmp	r3, #0
 8041a4e:	d003      	beq.n	8041a58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8041a50:	687b      	ldr	r3, [r7, #4]
 8041a52:	695b      	ldr	r3, [r3, #20]
 8041a54:	2b00      	cmp	r3, #0
 8041a56:	d023      	beq.n	8041aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8041a58:	687b      	ldr	r3, [r7, #4]
 8041a5a:	681b      	ldr	r3, [r3, #0]
 8041a5c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8041a60:	2b00      	cmp	r3, #0
 8041a62:	d003      	beq.n	8041a6c <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8041a64:	687b      	ldr	r3, [r7, #4]
 8041a66:	699b      	ldr	r3, [r3, #24]
 8041a68:	2b00      	cmp	r3, #0
 8041a6a:	d019      	beq.n	8041aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8041a6c:	687b      	ldr	r3, [r7, #4]
 8041a6e:	681b      	ldr	r3, [r3, #0]
 8041a70:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8041a74:	2b00      	cmp	r3, #0
 8041a76:	d004      	beq.n	8041a82 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8041a78:	687b      	ldr	r3, [r7, #4]
 8041a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041a7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8041a80:	d00e      	beq.n	8041aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8041a82:	687b      	ldr	r3, [r7, #4]
 8041a84:	681b      	ldr	r3, [r3, #0]
 8041a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8041a8a:	2b00      	cmp	r3, #0
 8041a8c:	d019      	beq.n	8041ac2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8041a8e:	687b      	ldr	r3, [r7, #4]
 8041a90:	6a1b      	ldr	r3, [r3, #32]
 8041a92:	2b00      	cmp	r3, #0
 8041a94:	d115      	bne.n	8041ac2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8041a96:	687b      	ldr	r3, [r7, #4]
 8041a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041a9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8041a9e:	d110      	bne.n	8041ac2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8041aa0:	687b      	ldr	r3, [r7, #4]
 8041aa2:	685a      	ldr	r2, [r3, #4]
 8041aa4:	687b      	ldr	r3, [r7, #4]
 8041aa6:	689b      	ldr	r3, [r3, #8]
 8041aa8:	019b      	lsls	r3, r3, #6
 8041aaa:	431a      	orrs	r2, r3
 8041aac:	687b      	ldr	r3, [r7, #4]
 8041aae:	68db      	ldr	r3, [r3, #12]
 8041ab0:	061b      	lsls	r3, r3, #24
 8041ab2:	431a      	orrs	r2, r3
 8041ab4:	687b      	ldr	r3, [r7, #4]
 8041ab6:	691b      	ldr	r3, [r3, #16]
 8041ab8:	071b      	lsls	r3, r3, #28
 8041aba:	492c      	ldr	r1, [pc, #176]	; (8041b6c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8041abc:	4313      	orrs	r3, r2
 8041abe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8041ac2:	687b      	ldr	r3, [r7, #4]
 8041ac4:	681b      	ldr	r3, [r3, #0]
 8041ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041aca:	2b00      	cmp	r3, #0
 8041acc:	d010      	beq.n	8041af0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8041ace:	687b      	ldr	r3, [r7, #4]
 8041ad0:	685a      	ldr	r2, [r3, #4]
 8041ad2:	687b      	ldr	r3, [r7, #4]
 8041ad4:	689b      	ldr	r3, [r3, #8]
 8041ad6:	019b      	lsls	r3, r3, #6
 8041ad8:	431a      	orrs	r2, r3
 8041ada:	687b      	ldr	r3, [r7, #4]
 8041adc:	68db      	ldr	r3, [r3, #12]
 8041ade:	061b      	lsls	r3, r3, #24
 8041ae0:	431a      	orrs	r2, r3
 8041ae2:	687b      	ldr	r3, [r7, #4]
 8041ae4:	691b      	ldr	r3, [r3, #16]
 8041ae6:	071b      	lsls	r3, r3, #28
 8041ae8:	4920      	ldr	r1, [pc, #128]	; (8041b6c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8041aea:	4313      	orrs	r3, r2
 8041aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8041af0:	4b20      	ldr	r3, [pc, #128]	; (8041b74 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8041af2:	2201      	movs	r2, #1
 8041af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8041af6:	f7ff f845 	bl	8040b84 <HAL_GetTick>
 8041afa:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8041afc:	e008      	b.n	8041b10 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8041afe:	f7ff f841 	bl	8040b84 <HAL_GetTick>
 8041b02:	4602      	mov	r2, r0
 8041b04:	693b      	ldr	r3, [r7, #16]
 8041b06:	1ad3      	subs	r3, r2, r3
 8041b08:	2b02      	cmp	r3, #2
 8041b0a:	d901      	bls.n	8041b10 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8041b0c:	2303      	movs	r3, #3
 8041b0e:	e028      	b.n	8041b62 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8041b10:	4b16      	ldr	r3, [pc, #88]	; (8041b6c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8041b12:	681b      	ldr	r3, [r3, #0]
 8041b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041b18:	2b00      	cmp	r3, #0
 8041b1a:	d0f0      	beq.n	8041afe <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8041b1c:	687b      	ldr	r3, [r7, #4]
 8041b1e:	681b      	ldr	r3, [r3, #0]
 8041b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041b24:	2b00      	cmp	r3, #0
 8041b26:	d00a      	beq.n	8041b3e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8041b28:	4b10      	ldr	r3, [pc, #64]	; (8041b6c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8041b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041b2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8041b32:	687b      	ldr	r3, [r7, #4]
 8041b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041b36:	490d      	ldr	r1, [pc, #52]	; (8041b6c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8041b38:	4313      	orrs	r3, r2
 8041b3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8041b3e:	687b      	ldr	r3, [r7, #4]
 8041b40:	681b      	ldr	r3, [r3, #0]
 8041b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8041b46:	2b00      	cmp	r3, #0
 8041b48:	d00a      	beq.n	8041b60 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8041b4a:	4b08      	ldr	r3, [pc, #32]	; (8041b6c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8041b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041b50:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8041b54:	687b      	ldr	r3, [r7, #4]
 8041b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b58:	4904      	ldr	r1, [pc, #16]	; (8041b6c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8041b5a:	4313      	orrs	r3, r2
 8041b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8041b60:	2300      	movs	r3, #0
}
 8041b62:	4618      	mov	r0, r3
 8041b64:	3718      	adds	r7, #24
 8041b66:	46bd      	mov	sp, r7
 8041b68:	bd80      	pop	{r7, pc}
 8041b6a:	bf00      	nop
 8041b6c:	40023800 	.word	0x40023800
 8041b70:	424710d8 	.word	0x424710d8
 8041b74:	42470068 	.word	0x42470068

08041b78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8041b78:	b580      	push	{r7, lr}
 8041b7a:	b086      	sub	sp, #24
 8041b7c:	af00      	add	r7, sp, #0
 8041b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8041b80:	687b      	ldr	r3, [r7, #4]
 8041b82:	2b00      	cmp	r3, #0
 8041b84:	d101      	bne.n	8041b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8041b86:	2301      	movs	r3, #1
 8041b88:	e273      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8041b8a:	687b      	ldr	r3, [r7, #4]
 8041b8c:	681b      	ldr	r3, [r3, #0]
 8041b8e:	f003 0301 	and.w	r3, r3, #1
 8041b92:	2b00      	cmp	r3, #0
 8041b94:	d075      	beq.n	8041c82 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8041b96:	4b88      	ldr	r3, [pc, #544]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041b98:	689b      	ldr	r3, [r3, #8]
 8041b9a:	f003 030c 	and.w	r3, r3, #12
 8041b9e:	2b04      	cmp	r3, #4
 8041ba0:	d00c      	beq.n	8041bbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8041ba2:	4b85      	ldr	r3, [pc, #532]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041ba4:	689b      	ldr	r3, [r3, #8]
 8041ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8041baa:	2b08      	cmp	r3, #8
 8041bac:	d112      	bne.n	8041bd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8041bae:	4b82      	ldr	r3, [pc, #520]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041bb0:	685b      	ldr	r3, [r3, #4]
 8041bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8041bba:	d10b      	bne.n	8041bd4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041bbc:	4b7e      	ldr	r3, [pc, #504]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041bbe:	681b      	ldr	r3, [r3, #0]
 8041bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041bc4:	2b00      	cmp	r3, #0
 8041bc6:	d05b      	beq.n	8041c80 <HAL_RCC_OscConfig+0x108>
 8041bc8:	687b      	ldr	r3, [r7, #4]
 8041bca:	685b      	ldr	r3, [r3, #4]
 8041bcc:	2b00      	cmp	r3, #0
 8041bce:	d157      	bne.n	8041c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8041bd0:	2301      	movs	r3, #1
 8041bd2:	e24e      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8041bd4:	687b      	ldr	r3, [r7, #4]
 8041bd6:	685b      	ldr	r3, [r3, #4]
 8041bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041bdc:	d106      	bne.n	8041bec <HAL_RCC_OscConfig+0x74>
 8041bde:	4b76      	ldr	r3, [pc, #472]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041be0:	681b      	ldr	r3, [r3, #0]
 8041be2:	4a75      	ldr	r2, [pc, #468]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041be8:	6013      	str	r3, [r2, #0]
 8041bea:	e01d      	b.n	8041c28 <HAL_RCC_OscConfig+0xb0>
 8041bec:	687b      	ldr	r3, [r7, #4]
 8041bee:	685b      	ldr	r3, [r3, #4]
 8041bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8041bf4:	d10c      	bne.n	8041c10 <HAL_RCC_OscConfig+0x98>
 8041bf6:	4b70      	ldr	r3, [pc, #448]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041bf8:	681b      	ldr	r3, [r3, #0]
 8041bfa:	4a6f      	ldr	r2, [pc, #444]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041c00:	6013      	str	r3, [r2, #0]
 8041c02:	4b6d      	ldr	r3, [pc, #436]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041c04:	681b      	ldr	r3, [r3, #0]
 8041c06:	4a6c      	ldr	r2, [pc, #432]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041c0c:	6013      	str	r3, [r2, #0]
 8041c0e:	e00b      	b.n	8041c28 <HAL_RCC_OscConfig+0xb0>
 8041c10:	4b69      	ldr	r3, [pc, #420]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041c12:	681b      	ldr	r3, [r3, #0]
 8041c14:	4a68      	ldr	r2, [pc, #416]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041c1a:	6013      	str	r3, [r2, #0]
 8041c1c:	4b66      	ldr	r3, [pc, #408]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041c1e:	681b      	ldr	r3, [r3, #0]
 8041c20:	4a65      	ldr	r2, [pc, #404]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8041c28:	687b      	ldr	r3, [r7, #4]
 8041c2a:	685b      	ldr	r3, [r3, #4]
 8041c2c:	2b00      	cmp	r3, #0
 8041c2e:	d013      	beq.n	8041c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041c30:	f7fe ffa8 	bl	8040b84 <HAL_GetTick>
 8041c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041c36:	e008      	b.n	8041c4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8041c38:	f7fe ffa4 	bl	8040b84 <HAL_GetTick>
 8041c3c:	4602      	mov	r2, r0
 8041c3e:	693b      	ldr	r3, [r7, #16]
 8041c40:	1ad3      	subs	r3, r2, r3
 8041c42:	2b64      	cmp	r3, #100	; 0x64
 8041c44:	d901      	bls.n	8041c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8041c46:	2303      	movs	r3, #3
 8041c48:	e213      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041c4a:	4b5b      	ldr	r3, [pc, #364]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041c4c:	681b      	ldr	r3, [r3, #0]
 8041c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041c52:	2b00      	cmp	r3, #0
 8041c54:	d0f0      	beq.n	8041c38 <HAL_RCC_OscConfig+0xc0>
 8041c56:	e014      	b.n	8041c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041c58:	f7fe ff94 	bl	8040b84 <HAL_GetTick>
 8041c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8041c5e:	e008      	b.n	8041c72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8041c60:	f7fe ff90 	bl	8040b84 <HAL_GetTick>
 8041c64:	4602      	mov	r2, r0
 8041c66:	693b      	ldr	r3, [r7, #16]
 8041c68:	1ad3      	subs	r3, r2, r3
 8041c6a:	2b64      	cmp	r3, #100	; 0x64
 8041c6c:	d901      	bls.n	8041c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8041c6e:	2303      	movs	r3, #3
 8041c70:	e1ff      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8041c72:	4b51      	ldr	r3, [pc, #324]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041c74:	681b      	ldr	r3, [r3, #0]
 8041c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041c7a:	2b00      	cmp	r3, #0
 8041c7c:	d1f0      	bne.n	8041c60 <HAL_RCC_OscConfig+0xe8>
 8041c7e:	e000      	b.n	8041c82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8041c82:	687b      	ldr	r3, [r7, #4]
 8041c84:	681b      	ldr	r3, [r3, #0]
 8041c86:	f003 0302 	and.w	r3, r3, #2
 8041c8a:	2b00      	cmp	r3, #0
 8041c8c:	d063      	beq.n	8041d56 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8041c8e:	4b4a      	ldr	r3, [pc, #296]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041c90:	689b      	ldr	r3, [r3, #8]
 8041c92:	f003 030c 	and.w	r3, r3, #12
 8041c96:	2b00      	cmp	r3, #0
 8041c98:	d00b      	beq.n	8041cb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8041c9a:	4b47      	ldr	r3, [pc, #284]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041c9c:	689b      	ldr	r3, [r3, #8]
 8041c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8041ca2:	2b08      	cmp	r3, #8
 8041ca4:	d11c      	bne.n	8041ce0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8041ca6:	4b44      	ldr	r3, [pc, #272]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041ca8:	685b      	ldr	r3, [r3, #4]
 8041caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041cae:	2b00      	cmp	r3, #0
 8041cb0:	d116      	bne.n	8041ce0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041cb2:	4b41      	ldr	r3, [pc, #260]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041cb4:	681b      	ldr	r3, [r3, #0]
 8041cb6:	f003 0302 	and.w	r3, r3, #2
 8041cba:	2b00      	cmp	r3, #0
 8041cbc:	d005      	beq.n	8041cca <HAL_RCC_OscConfig+0x152>
 8041cbe:	687b      	ldr	r3, [r7, #4]
 8041cc0:	68db      	ldr	r3, [r3, #12]
 8041cc2:	2b01      	cmp	r3, #1
 8041cc4:	d001      	beq.n	8041cca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8041cc6:	2301      	movs	r3, #1
 8041cc8:	e1d3      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041cca:	4b3b      	ldr	r3, [pc, #236]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041ccc:	681b      	ldr	r3, [r3, #0]
 8041cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8041cd2:	687b      	ldr	r3, [r7, #4]
 8041cd4:	691b      	ldr	r3, [r3, #16]
 8041cd6:	00db      	lsls	r3, r3, #3
 8041cd8:	4937      	ldr	r1, [pc, #220]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041cda:	4313      	orrs	r3, r2
 8041cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041cde:	e03a      	b.n	8041d56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8041ce0:	687b      	ldr	r3, [r7, #4]
 8041ce2:	68db      	ldr	r3, [r3, #12]
 8041ce4:	2b00      	cmp	r3, #0
 8041ce6:	d020      	beq.n	8041d2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8041ce8:	4b34      	ldr	r3, [pc, #208]	; (8041dbc <HAL_RCC_OscConfig+0x244>)
 8041cea:	2201      	movs	r2, #1
 8041cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041cee:	f7fe ff49 	bl	8040b84 <HAL_GetTick>
 8041cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041cf4:	e008      	b.n	8041d08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8041cf6:	f7fe ff45 	bl	8040b84 <HAL_GetTick>
 8041cfa:	4602      	mov	r2, r0
 8041cfc:	693b      	ldr	r3, [r7, #16]
 8041cfe:	1ad3      	subs	r3, r2, r3
 8041d00:	2b02      	cmp	r3, #2
 8041d02:	d901      	bls.n	8041d08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8041d04:	2303      	movs	r3, #3
 8041d06:	e1b4      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041d08:	4b2b      	ldr	r3, [pc, #172]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041d0a:	681b      	ldr	r3, [r3, #0]
 8041d0c:	f003 0302 	and.w	r3, r3, #2
 8041d10:	2b00      	cmp	r3, #0
 8041d12:	d0f0      	beq.n	8041cf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041d14:	4b28      	ldr	r3, [pc, #160]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041d16:	681b      	ldr	r3, [r3, #0]
 8041d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8041d1c:	687b      	ldr	r3, [r7, #4]
 8041d1e:	691b      	ldr	r3, [r3, #16]
 8041d20:	00db      	lsls	r3, r3, #3
 8041d22:	4925      	ldr	r1, [pc, #148]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041d24:	4313      	orrs	r3, r2
 8041d26:	600b      	str	r3, [r1, #0]
 8041d28:	e015      	b.n	8041d56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041d2a:	4b24      	ldr	r3, [pc, #144]	; (8041dbc <HAL_RCC_OscConfig+0x244>)
 8041d2c:	2200      	movs	r2, #0
 8041d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041d30:	f7fe ff28 	bl	8040b84 <HAL_GetTick>
 8041d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8041d36:	e008      	b.n	8041d4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8041d38:	f7fe ff24 	bl	8040b84 <HAL_GetTick>
 8041d3c:	4602      	mov	r2, r0
 8041d3e:	693b      	ldr	r3, [r7, #16]
 8041d40:	1ad3      	subs	r3, r2, r3
 8041d42:	2b02      	cmp	r3, #2
 8041d44:	d901      	bls.n	8041d4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8041d46:	2303      	movs	r3, #3
 8041d48:	e193      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8041d4a:	4b1b      	ldr	r3, [pc, #108]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041d4c:	681b      	ldr	r3, [r3, #0]
 8041d4e:	f003 0302 	and.w	r3, r3, #2
 8041d52:	2b00      	cmp	r3, #0
 8041d54:	d1f0      	bne.n	8041d38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8041d56:	687b      	ldr	r3, [r7, #4]
 8041d58:	681b      	ldr	r3, [r3, #0]
 8041d5a:	f003 0308 	and.w	r3, r3, #8
 8041d5e:	2b00      	cmp	r3, #0
 8041d60:	d036      	beq.n	8041dd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8041d62:	687b      	ldr	r3, [r7, #4]
 8041d64:	695b      	ldr	r3, [r3, #20]
 8041d66:	2b00      	cmp	r3, #0
 8041d68:	d016      	beq.n	8041d98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8041d6a:	4b15      	ldr	r3, [pc, #84]	; (8041dc0 <HAL_RCC_OscConfig+0x248>)
 8041d6c:	2201      	movs	r2, #1
 8041d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041d70:	f7fe ff08 	bl	8040b84 <HAL_GetTick>
 8041d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8041d76:	e008      	b.n	8041d8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8041d78:	f7fe ff04 	bl	8040b84 <HAL_GetTick>
 8041d7c:	4602      	mov	r2, r0
 8041d7e:	693b      	ldr	r3, [r7, #16]
 8041d80:	1ad3      	subs	r3, r2, r3
 8041d82:	2b02      	cmp	r3, #2
 8041d84:	d901      	bls.n	8041d8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8041d86:	2303      	movs	r3, #3
 8041d88:	e173      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8041d8a:	4b0b      	ldr	r3, [pc, #44]	; (8041db8 <HAL_RCC_OscConfig+0x240>)
 8041d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041d8e:	f003 0302 	and.w	r3, r3, #2
 8041d92:	2b00      	cmp	r3, #0
 8041d94:	d0f0      	beq.n	8041d78 <HAL_RCC_OscConfig+0x200>
 8041d96:	e01b      	b.n	8041dd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041d98:	4b09      	ldr	r3, [pc, #36]	; (8041dc0 <HAL_RCC_OscConfig+0x248>)
 8041d9a:	2200      	movs	r2, #0
 8041d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041d9e:	f7fe fef1 	bl	8040b84 <HAL_GetTick>
 8041da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041da4:	e00e      	b.n	8041dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8041da6:	f7fe feed 	bl	8040b84 <HAL_GetTick>
 8041daa:	4602      	mov	r2, r0
 8041dac:	693b      	ldr	r3, [r7, #16]
 8041dae:	1ad3      	subs	r3, r2, r3
 8041db0:	2b02      	cmp	r3, #2
 8041db2:	d907      	bls.n	8041dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8041db4:	2303      	movs	r3, #3
 8041db6:	e15c      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
 8041db8:	40023800 	.word	0x40023800
 8041dbc:	42470000 	.word	0x42470000
 8041dc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041dc4:	4b8a      	ldr	r3, [pc, #552]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041dc8:	f003 0302 	and.w	r3, r3, #2
 8041dcc:	2b00      	cmp	r3, #0
 8041dce:	d1ea      	bne.n	8041da6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041dd0:	687b      	ldr	r3, [r7, #4]
 8041dd2:	681b      	ldr	r3, [r3, #0]
 8041dd4:	f003 0304 	and.w	r3, r3, #4
 8041dd8:	2b00      	cmp	r3, #0
 8041dda:	f000 8097 	beq.w	8041f0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041dde:	2300      	movs	r3, #0
 8041de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8041de2:	4b83      	ldr	r3, [pc, #524]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041dea:	2b00      	cmp	r3, #0
 8041dec:	d10f      	bne.n	8041e0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8041dee:	2300      	movs	r3, #0
 8041df0:	60bb      	str	r3, [r7, #8]
 8041df2:	4b7f      	ldr	r3, [pc, #508]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041df6:	4a7e      	ldr	r2, [pc, #504]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8041dfe:	4b7c      	ldr	r3, [pc, #496]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041e06:	60bb      	str	r3, [r7, #8]
 8041e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8041e0a:	2301      	movs	r3, #1
 8041e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8041e0e:	4b79      	ldr	r3, [pc, #484]	; (8041ff4 <HAL_RCC_OscConfig+0x47c>)
 8041e10:	681b      	ldr	r3, [r3, #0]
 8041e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041e16:	2b00      	cmp	r3, #0
 8041e18:	d118      	bne.n	8041e4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8041e1a:	4b76      	ldr	r3, [pc, #472]	; (8041ff4 <HAL_RCC_OscConfig+0x47c>)
 8041e1c:	681b      	ldr	r3, [r3, #0]
 8041e1e:	4a75      	ldr	r2, [pc, #468]	; (8041ff4 <HAL_RCC_OscConfig+0x47c>)
 8041e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8041e26:	f7fe fead 	bl	8040b84 <HAL_GetTick>
 8041e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8041e2c:	e008      	b.n	8041e40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041e2e:	f7fe fea9 	bl	8040b84 <HAL_GetTick>
 8041e32:	4602      	mov	r2, r0
 8041e34:	693b      	ldr	r3, [r7, #16]
 8041e36:	1ad3      	subs	r3, r2, r3
 8041e38:	2b02      	cmp	r3, #2
 8041e3a:	d901      	bls.n	8041e40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8041e3c:	2303      	movs	r3, #3
 8041e3e:	e118      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8041e40:	4b6c      	ldr	r3, [pc, #432]	; (8041ff4 <HAL_RCC_OscConfig+0x47c>)
 8041e42:	681b      	ldr	r3, [r3, #0]
 8041e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041e48:	2b00      	cmp	r3, #0
 8041e4a:	d0f0      	beq.n	8041e2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8041e4c:	687b      	ldr	r3, [r7, #4]
 8041e4e:	689b      	ldr	r3, [r3, #8]
 8041e50:	2b01      	cmp	r3, #1
 8041e52:	d106      	bne.n	8041e62 <HAL_RCC_OscConfig+0x2ea>
 8041e54:	4b66      	ldr	r3, [pc, #408]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041e58:	4a65      	ldr	r2, [pc, #404]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041e5a:	f043 0301 	orr.w	r3, r3, #1
 8041e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8041e60:	e01c      	b.n	8041e9c <HAL_RCC_OscConfig+0x324>
 8041e62:	687b      	ldr	r3, [r7, #4]
 8041e64:	689b      	ldr	r3, [r3, #8]
 8041e66:	2b05      	cmp	r3, #5
 8041e68:	d10c      	bne.n	8041e84 <HAL_RCC_OscConfig+0x30c>
 8041e6a:	4b61      	ldr	r3, [pc, #388]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041e6e:	4a60      	ldr	r2, [pc, #384]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041e70:	f043 0304 	orr.w	r3, r3, #4
 8041e74:	6713      	str	r3, [r2, #112]	; 0x70
 8041e76:	4b5e      	ldr	r3, [pc, #376]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041e7a:	4a5d      	ldr	r2, [pc, #372]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041e7c:	f043 0301 	orr.w	r3, r3, #1
 8041e80:	6713      	str	r3, [r2, #112]	; 0x70
 8041e82:	e00b      	b.n	8041e9c <HAL_RCC_OscConfig+0x324>
 8041e84:	4b5a      	ldr	r3, [pc, #360]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041e88:	4a59      	ldr	r2, [pc, #356]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041e8a:	f023 0301 	bic.w	r3, r3, #1
 8041e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8041e90:	4b57      	ldr	r3, [pc, #348]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041e94:	4a56      	ldr	r2, [pc, #344]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041e96:	f023 0304 	bic.w	r3, r3, #4
 8041e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8041e9c:	687b      	ldr	r3, [r7, #4]
 8041e9e:	689b      	ldr	r3, [r3, #8]
 8041ea0:	2b00      	cmp	r3, #0
 8041ea2:	d015      	beq.n	8041ed0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041ea4:	f7fe fe6e 	bl	8040b84 <HAL_GetTick>
 8041ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041eaa:	e00a      	b.n	8041ec2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041eac:	f7fe fe6a 	bl	8040b84 <HAL_GetTick>
 8041eb0:	4602      	mov	r2, r0
 8041eb2:	693b      	ldr	r3, [r7, #16]
 8041eb4:	1ad3      	subs	r3, r2, r3
 8041eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8041eba:	4293      	cmp	r3, r2
 8041ebc:	d901      	bls.n	8041ec2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8041ebe:	2303      	movs	r3, #3
 8041ec0:	e0d7      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041ec2:	4b4b      	ldr	r3, [pc, #300]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041ec6:	f003 0302 	and.w	r3, r3, #2
 8041eca:	2b00      	cmp	r3, #0
 8041ecc:	d0ee      	beq.n	8041eac <HAL_RCC_OscConfig+0x334>
 8041ece:	e014      	b.n	8041efa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041ed0:	f7fe fe58 	bl	8040b84 <HAL_GetTick>
 8041ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041ed6:	e00a      	b.n	8041eee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041ed8:	f7fe fe54 	bl	8040b84 <HAL_GetTick>
 8041edc:	4602      	mov	r2, r0
 8041ede:	693b      	ldr	r3, [r7, #16]
 8041ee0:	1ad3      	subs	r3, r2, r3
 8041ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8041ee6:	4293      	cmp	r3, r2
 8041ee8:	d901      	bls.n	8041eee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8041eea:	2303      	movs	r3, #3
 8041eec:	e0c1      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041eee:	4b40      	ldr	r3, [pc, #256]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041ef2:	f003 0302 	and.w	r3, r3, #2
 8041ef6:	2b00      	cmp	r3, #0
 8041ef8:	d1ee      	bne.n	8041ed8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8041efa:	7dfb      	ldrb	r3, [r7, #23]
 8041efc:	2b01      	cmp	r3, #1
 8041efe:	d105      	bne.n	8041f0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041f00:	4b3b      	ldr	r3, [pc, #236]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041f04:	4a3a      	ldr	r2, [pc, #232]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041f0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8041f0c:	687b      	ldr	r3, [r7, #4]
 8041f0e:	699b      	ldr	r3, [r3, #24]
 8041f10:	2b00      	cmp	r3, #0
 8041f12:	f000 80ad 	beq.w	8042070 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8041f16:	4b36      	ldr	r3, [pc, #216]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041f18:	689b      	ldr	r3, [r3, #8]
 8041f1a:	f003 030c 	and.w	r3, r3, #12
 8041f1e:	2b08      	cmp	r3, #8
 8041f20:	d060      	beq.n	8041fe4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8041f22:	687b      	ldr	r3, [r7, #4]
 8041f24:	699b      	ldr	r3, [r3, #24]
 8041f26:	2b02      	cmp	r3, #2
 8041f28:	d145      	bne.n	8041fb6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041f2a:	4b33      	ldr	r3, [pc, #204]	; (8041ff8 <HAL_RCC_OscConfig+0x480>)
 8041f2c:	2200      	movs	r2, #0
 8041f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041f30:	f7fe fe28 	bl	8040b84 <HAL_GetTick>
 8041f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041f36:	e008      	b.n	8041f4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041f38:	f7fe fe24 	bl	8040b84 <HAL_GetTick>
 8041f3c:	4602      	mov	r2, r0
 8041f3e:	693b      	ldr	r3, [r7, #16]
 8041f40:	1ad3      	subs	r3, r2, r3
 8041f42:	2b02      	cmp	r3, #2
 8041f44:	d901      	bls.n	8041f4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8041f46:	2303      	movs	r3, #3
 8041f48:	e093      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041f4a:	4b29      	ldr	r3, [pc, #164]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041f4c:	681b      	ldr	r3, [r3, #0]
 8041f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041f52:	2b00      	cmp	r3, #0
 8041f54:	d1f0      	bne.n	8041f38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8041f56:	687b      	ldr	r3, [r7, #4]
 8041f58:	69da      	ldr	r2, [r3, #28]
 8041f5a:	687b      	ldr	r3, [r7, #4]
 8041f5c:	6a1b      	ldr	r3, [r3, #32]
 8041f5e:	431a      	orrs	r2, r3
 8041f60:	687b      	ldr	r3, [r7, #4]
 8041f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041f64:	019b      	lsls	r3, r3, #6
 8041f66:	431a      	orrs	r2, r3
 8041f68:	687b      	ldr	r3, [r7, #4]
 8041f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041f6c:	085b      	lsrs	r3, r3, #1
 8041f6e:	3b01      	subs	r3, #1
 8041f70:	041b      	lsls	r3, r3, #16
 8041f72:	431a      	orrs	r2, r3
 8041f74:	687b      	ldr	r3, [r7, #4]
 8041f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041f78:	061b      	lsls	r3, r3, #24
 8041f7a:	431a      	orrs	r2, r3
 8041f7c:	687b      	ldr	r3, [r7, #4]
 8041f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041f80:	071b      	lsls	r3, r3, #28
 8041f82:	491b      	ldr	r1, [pc, #108]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041f84:	4313      	orrs	r3, r2
 8041f86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041f88:	4b1b      	ldr	r3, [pc, #108]	; (8041ff8 <HAL_RCC_OscConfig+0x480>)
 8041f8a:	2201      	movs	r2, #1
 8041f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041f8e:	f7fe fdf9 	bl	8040b84 <HAL_GetTick>
 8041f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041f94:	e008      	b.n	8041fa8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041f96:	f7fe fdf5 	bl	8040b84 <HAL_GetTick>
 8041f9a:	4602      	mov	r2, r0
 8041f9c:	693b      	ldr	r3, [r7, #16]
 8041f9e:	1ad3      	subs	r3, r2, r3
 8041fa0:	2b02      	cmp	r3, #2
 8041fa2:	d901      	bls.n	8041fa8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8041fa4:	2303      	movs	r3, #3
 8041fa6:	e064      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041fa8:	4b11      	ldr	r3, [pc, #68]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041faa:	681b      	ldr	r3, [r3, #0]
 8041fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041fb0:	2b00      	cmp	r3, #0
 8041fb2:	d0f0      	beq.n	8041f96 <HAL_RCC_OscConfig+0x41e>
 8041fb4:	e05c      	b.n	8042070 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041fb6:	4b10      	ldr	r3, [pc, #64]	; (8041ff8 <HAL_RCC_OscConfig+0x480>)
 8041fb8:	2200      	movs	r2, #0
 8041fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041fbc:	f7fe fde2 	bl	8040b84 <HAL_GetTick>
 8041fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041fc2:	e008      	b.n	8041fd6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041fc4:	f7fe fdde 	bl	8040b84 <HAL_GetTick>
 8041fc8:	4602      	mov	r2, r0
 8041fca:	693b      	ldr	r3, [r7, #16]
 8041fcc:	1ad3      	subs	r3, r2, r3
 8041fce:	2b02      	cmp	r3, #2
 8041fd0:	d901      	bls.n	8041fd6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8041fd2:	2303      	movs	r3, #3
 8041fd4:	e04d      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041fd6:	4b06      	ldr	r3, [pc, #24]	; (8041ff0 <HAL_RCC_OscConfig+0x478>)
 8041fd8:	681b      	ldr	r3, [r3, #0]
 8041fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041fde:	2b00      	cmp	r3, #0
 8041fe0:	d1f0      	bne.n	8041fc4 <HAL_RCC_OscConfig+0x44c>
 8041fe2:	e045      	b.n	8042070 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8041fe4:	687b      	ldr	r3, [r7, #4]
 8041fe6:	699b      	ldr	r3, [r3, #24]
 8041fe8:	2b01      	cmp	r3, #1
 8041fea:	d107      	bne.n	8041ffc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8041fec:	2301      	movs	r3, #1
 8041fee:	e040      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
 8041ff0:	40023800 	.word	0x40023800
 8041ff4:	40007000 	.word	0x40007000
 8041ff8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8041ffc:	4b1f      	ldr	r3, [pc, #124]	; (804207c <HAL_RCC_OscConfig+0x504>)
 8041ffe:	685b      	ldr	r3, [r3, #4]
 8042000:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8042002:	687b      	ldr	r3, [r7, #4]
 8042004:	699b      	ldr	r3, [r3, #24]
 8042006:	2b01      	cmp	r3, #1
 8042008:	d030      	beq.n	804206c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804200a:	68fb      	ldr	r3, [r7, #12]
 804200c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8042010:	687b      	ldr	r3, [r7, #4]
 8042012:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8042014:	429a      	cmp	r2, r3
 8042016:	d129      	bne.n	804206c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8042018:	68fb      	ldr	r3, [r7, #12]
 804201a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 804201e:	687b      	ldr	r3, [r7, #4]
 8042020:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8042022:	429a      	cmp	r2, r3
 8042024:	d122      	bne.n	804206c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8042026:	68fa      	ldr	r2, [r7, #12]
 8042028:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 804202c:	4013      	ands	r3, r2
 804202e:	687a      	ldr	r2, [r7, #4]
 8042030:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8042032:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8042034:	4293      	cmp	r3, r2
 8042036:	d119      	bne.n	804206c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8042038:	68fb      	ldr	r3, [r7, #12]
 804203a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 804203e:	687b      	ldr	r3, [r7, #4]
 8042040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042042:	085b      	lsrs	r3, r3, #1
 8042044:	3b01      	subs	r3, #1
 8042046:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8042048:	429a      	cmp	r2, r3
 804204a:	d10f      	bne.n	804206c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 804204c:	68fb      	ldr	r3, [r7, #12]
 804204e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8042052:	687b      	ldr	r3, [r7, #4]
 8042054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042056:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8042058:	429a      	cmp	r2, r3
 804205a:	d107      	bne.n	804206c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 804205c:	68fb      	ldr	r3, [r7, #12]
 804205e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8042062:	687b      	ldr	r3, [r7, #4]
 8042064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042066:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8042068:	429a      	cmp	r2, r3
 804206a:	d001      	beq.n	8042070 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 804206c:	2301      	movs	r3, #1
 804206e:	e000      	b.n	8042072 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8042070:	2300      	movs	r3, #0
}
 8042072:	4618      	mov	r0, r3
 8042074:	3718      	adds	r7, #24
 8042076:	46bd      	mov	sp, r7
 8042078:	bd80      	pop	{r7, pc}
 804207a:	bf00      	nop
 804207c:	40023800 	.word	0x40023800

08042080 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8042080:	b580      	push	{r7, lr}
 8042082:	b082      	sub	sp, #8
 8042084:	af00      	add	r7, sp, #0
 8042086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8042088:	687b      	ldr	r3, [r7, #4]
 804208a:	2b00      	cmp	r3, #0
 804208c:	d101      	bne.n	8042092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 804208e:	2301      	movs	r3, #1
 8042090:	e03f      	b.n	8042112 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8042092:	687b      	ldr	r3, [r7, #4]
 8042094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8042098:	b2db      	uxtb	r3, r3
 804209a:	2b00      	cmp	r3, #0
 804209c:	d106      	bne.n	80420ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 804209e:	687b      	ldr	r3, [r7, #4]
 80420a0:	2200      	movs	r2, #0
 80420a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80420a6:	6878      	ldr	r0, [r7, #4]
 80420a8:	f7fe fbe6 	bl	8040878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80420ac:	687b      	ldr	r3, [r7, #4]
 80420ae:	2224      	movs	r2, #36	; 0x24
 80420b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80420b4:	687b      	ldr	r3, [r7, #4]
 80420b6:	681b      	ldr	r3, [r3, #0]
 80420b8:	68da      	ldr	r2, [r3, #12]
 80420ba:	687b      	ldr	r3, [r7, #4]
 80420bc:	681b      	ldr	r3, [r3, #0]
 80420be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80420c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80420c4:	6878      	ldr	r0, [r7, #4]
 80420c6:	f000 f829 	bl	804211c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80420ca:	687b      	ldr	r3, [r7, #4]
 80420cc:	681b      	ldr	r3, [r3, #0]
 80420ce:	691a      	ldr	r2, [r3, #16]
 80420d0:	687b      	ldr	r3, [r7, #4]
 80420d2:	681b      	ldr	r3, [r3, #0]
 80420d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80420d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80420da:	687b      	ldr	r3, [r7, #4]
 80420dc:	681b      	ldr	r3, [r3, #0]
 80420de:	695a      	ldr	r2, [r3, #20]
 80420e0:	687b      	ldr	r3, [r7, #4]
 80420e2:	681b      	ldr	r3, [r3, #0]
 80420e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80420e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80420ea:	687b      	ldr	r3, [r7, #4]
 80420ec:	681b      	ldr	r3, [r3, #0]
 80420ee:	68da      	ldr	r2, [r3, #12]
 80420f0:	687b      	ldr	r3, [r7, #4]
 80420f2:	681b      	ldr	r3, [r3, #0]
 80420f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80420f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80420fa:	687b      	ldr	r3, [r7, #4]
 80420fc:	2200      	movs	r2, #0
 80420fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8042100:	687b      	ldr	r3, [r7, #4]
 8042102:	2220      	movs	r2, #32
 8042104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8042108:	687b      	ldr	r3, [r7, #4]
 804210a:	2220      	movs	r2, #32
 804210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8042110:	2300      	movs	r3, #0
}
 8042112:	4618      	mov	r0, r3
 8042114:	3708      	adds	r7, #8
 8042116:	46bd      	mov	sp, r7
 8042118:	bd80      	pop	{r7, pc}
	...

0804211c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 804211c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8042120:	b0c0      	sub	sp, #256	; 0x100
 8042122:	af00      	add	r7, sp, #0
 8042124:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8042128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804212c:	681b      	ldr	r3, [r3, #0]
 804212e:	691b      	ldr	r3, [r3, #16]
 8042130:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8042134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042138:	68d9      	ldr	r1, [r3, #12]
 804213a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804213e:	681a      	ldr	r2, [r3, #0]
 8042140:	ea40 0301 	orr.w	r3, r0, r1
 8042144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8042146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804214a:	689a      	ldr	r2, [r3, #8]
 804214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042150:	691b      	ldr	r3, [r3, #16]
 8042152:	431a      	orrs	r2, r3
 8042154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042158:	695b      	ldr	r3, [r3, #20]
 804215a:	431a      	orrs	r2, r3
 804215c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042160:	69db      	ldr	r3, [r3, #28]
 8042162:	4313      	orrs	r3, r2
 8042164:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8042168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804216c:	681b      	ldr	r3, [r3, #0]
 804216e:	68db      	ldr	r3, [r3, #12]
 8042170:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8042174:	f021 010c 	bic.w	r1, r1, #12
 8042178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804217c:	681a      	ldr	r2, [r3, #0]
 804217e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8042182:	430b      	orrs	r3, r1
 8042184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8042186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804218a:	681b      	ldr	r3, [r3, #0]
 804218c:	695b      	ldr	r3, [r3, #20]
 804218e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8042192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042196:	6999      	ldr	r1, [r3, #24]
 8042198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804219c:	681a      	ldr	r2, [r3, #0]
 804219e:	ea40 0301 	orr.w	r3, r0, r1
 80421a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80421a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80421a8:	681a      	ldr	r2, [r3, #0]
 80421aa:	4b8f      	ldr	r3, [pc, #572]	; (80423e8 <UART_SetConfig+0x2cc>)
 80421ac:	429a      	cmp	r2, r3
 80421ae:	d005      	beq.n	80421bc <UART_SetConfig+0xa0>
 80421b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80421b4:	681a      	ldr	r2, [r3, #0]
 80421b6:	4b8d      	ldr	r3, [pc, #564]	; (80423ec <UART_SetConfig+0x2d0>)
 80421b8:	429a      	cmp	r2, r3
 80421ba:	d104      	bne.n	80421c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80421bc:	f7ff fafa 	bl	80417b4 <HAL_RCC_GetPCLK2Freq>
 80421c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80421c4:	e003      	b.n	80421ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80421c6:	f7ff fae1 	bl	804178c <HAL_RCC_GetPCLK1Freq>
 80421ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80421ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80421d2:	69db      	ldr	r3, [r3, #28]
 80421d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80421d8:	f040 810c 	bne.w	80423f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80421dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80421e0:	2200      	movs	r2, #0
 80421e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80421e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80421ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80421ee:	4622      	mov	r2, r4
 80421f0:	462b      	mov	r3, r5
 80421f2:	1891      	adds	r1, r2, r2
 80421f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80421f6:	415b      	adcs	r3, r3
 80421f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80421fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80421fe:	4621      	mov	r1, r4
 8042200:	eb12 0801 	adds.w	r8, r2, r1
 8042204:	4629      	mov	r1, r5
 8042206:	eb43 0901 	adc.w	r9, r3, r1
 804220a:	f04f 0200 	mov.w	r2, #0
 804220e:	f04f 0300 	mov.w	r3, #0
 8042212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8042216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 804221a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 804221e:	4690      	mov	r8, r2
 8042220:	4699      	mov	r9, r3
 8042222:	4623      	mov	r3, r4
 8042224:	eb18 0303 	adds.w	r3, r8, r3
 8042228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 804222c:	462b      	mov	r3, r5
 804222e:	eb49 0303 	adc.w	r3, r9, r3
 8042232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8042236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804223a:	685b      	ldr	r3, [r3, #4]
 804223c:	2200      	movs	r2, #0
 804223e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8042242:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8042246:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 804224a:	460b      	mov	r3, r1
 804224c:	18db      	adds	r3, r3, r3
 804224e:	653b      	str	r3, [r7, #80]	; 0x50
 8042250:	4613      	mov	r3, r2
 8042252:	eb42 0303 	adc.w	r3, r2, r3
 8042256:	657b      	str	r3, [r7, #84]	; 0x54
 8042258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 804225c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8042260:	f7fd ffd0 	bl	8040204 <__aeabi_uldivmod>
 8042264:	4602      	mov	r2, r0
 8042266:	460b      	mov	r3, r1
 8042268:	4b61      	ldr	r3, [pc, #388]	; (80423f0 <UART_SetConfig+0x2d4>)
 804226a:	fba3 2302 	umull	r2, r3, r3, r2
 804226e:	095b      	lsrs	r3, r3, #5
 8042270:	011c      	lsls	r4, r3, #4
 8042272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8042276:	2200      	movs	r2, #0
 8042278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 804227c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8042280:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8042284:	4642      	mov	r2, r8
 8042286:	464b      	mov	r3, r9
 8042288:	1891      	adds	r1, r2, r2
 804228a:	64b9      	str	r1, [r7, #72]	; 0x48
 804228c:	415b      	adcs	r3, r3
 804228e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8042290:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8042294:	4641      	mov	r1, r8
 8042296:	eb12 0a01 	adds.w	sl, r2, r1
 804229a:	4649      	mov	r1, r9
 804229c:	eb43 0b01 	adc.w	fp, r3, r1
 80422a0:	f04f 0200 	mov.w	r2, #0
 80422a4:	f04f 0300 	mov.w	r3, #0
 80422a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80422ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80422b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80422b4:	4692      	mov	sl, r2
 80422b6:	469b      	mov	fp, r3
 80422b8:	4643      	mov	r3, r8
 80422ba:	eb1a 0303 	adds.w	r3, sl, r3
 80422be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80422c2:	464b      	mov	r3, r9
 80422c4:	eb4b 0303 	adc.w	r3, fp, r3
 80422c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80422cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80422d0:	685b      	ldr	r3, [r3, #4]
 80422d2:	2200      	movs	r2, #0
 80422d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80422d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80422dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80422e0:	460b      	mov	r3, r1
 80422e2:	18db      	adds	r3, r3, r3
 80422e4:	643b      	str	r3, [r7, #64]	; 0x40
 80422e6:	4613      	mov	r3, r2
 80422e8:	eb42 0303 	adc.w	r3, r2, r3
 80422ec:	647b      	str	r3, [r7, #68]	; 0x44
 80422ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80422f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80422f6:	f7fd ff85 	bl	8040204 <__aeabi_uldivmod>
 80422fa:	4602      	mov	r2, r0
 80422fc:	460b      	mov	r3, r1
 80422fe:	4611      	mov	r1, r2
 8042300:	4b3b      	ldr	r3, [pc, #236]	; (80423f0 <UART_SetConfig+0x2d4>)
 8042302:	fba3 2301 	umull	r2, r3, r3, r1
 8042306:	095b      	lsrs	r3, r3, #5
 8042308:	2264      	movs	r2, #100	; 0x64
 804230a:	fb02 f303 	mul.w	r3, r2, r3
 804230e:	1acb      	subs	r3, r1, r3
 8042310:	00db      	lsls	r3, r3, #3
 8042312:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8042316:	4b36      	ldr	r3, [pc, #216]	; (80423f0 <UART_SetConfig+0x2d4>)
 8042318:	fba3 2302 	umull	r2, r3, r3, r2
 804231c:	095b      	lsrs	r3, r3, #5
 804231e:	005b      	lsls	r3, r3, #1
 8042320:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8042324:	441c      	add	r4, r3
 8042326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 804232a:	2200      	movs	r2, #0
 804232c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8042330:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8042334:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8042338:	4642      	mov	r2, r8
 804233a:	464b      	mov	r3, r9
 804233c:	1891      	adds	r1, r2, r2
 804233e:	63b9      	str	r1, [r7, #56]	; 0x38
 8042340:	415b      	adcs	r3, r3
 8042342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8042344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8042348:	4641      	mov	r1, r8
 804234a:	1851      	adds	r1, r2, r1
 804234c:	6339      	str	r1, [r7, #48]	; 0x30
 804234e:	4649      	mov	r1, r9
 8042350:	414b      	adcs	r3, r1
 8042352:	637b      	str	r3, [r7, #52]	; 0x34
 8042354:	f04f 0200 	mov.w	r2, #0
 8042358:	f04f 0300 	mov.w	r3, #0
 804235c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8042360:	4659      	mov	r1, fp
 8042362:	00cb      	lsls	r3, r1, #3
 8042364:	4651      	mov	r1, sl
 8042366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 804236a:	4651      	mov	r1, sl
 804236c:	00ca      	lsls	r2, r1, #3
 804236e:	4610      	mov	r0, r2
 8042370:	4619      	mov	r1, r3
 8042372:	4603      	mov	r3, r0
 8042374:	4642      	mov	r2, r8
 8042376:	189b      	adds	r3, r3, r2
 8042378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 804237c:	464b      	mov	r3, r9
 804237e:	460a      	mov	r2, r1
 8042380:	eb42 0303 	adc.w	r3, r2, r3
 8042384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8042388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804238c:	685b      	ldr	r3, [r3, #4]
 804238e:	2200      	movs	r2, #0
 8042390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8042394:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8042398:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 804239c:	460b      	mov	r3, r1
 804239e:	18db      	adds	r3, r3, r3
 80423a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80423a2:	4613      	mov	r3, r2
 80423a4:	eb42 0303 	adc.w	r3, r2, r3
 80423a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80423aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80423ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80423b2:	f7fd ff27 	bl	8040204 <__aeabi_uldivmod>
 80423b6:	4602      	mov	r2, r0
 80423b8:	460b      	mov	r3, r1
 80423ba:	4b0d      	ldr	r3, [pc, #52]	; (80423f0 <UART_SetConfig+0x2d4>)
 80423bc:	fba3 1302 	umull	r1, r3, r3, r2
 80423c0:	095b      	lsrs	r3, r3, #5
 80423c2:	2164      	movs	r1, #100	; 0x64
 80423c4:	fb01 f303 	mul.w	r3, r1, r3
 80423c8:	1ad3      	subs	r3, r2, r3
 80423ca:	00db      	lsls	r3, r3, #3
 80423cc:	3332      	adds	r3, #50	; 0x32
 80423ce:	4a08      	ldr	r2, [pc, #32]	; (80423f0 <UART_SetConfig+0x2d4>)
 80423d0:	fba2 2303 	umull	r2, r3, r2, r3
 80423d4:	095b      	lsrs	r3, r3, #5
 80423d6:	f003 0207 	and.w	r2, r3, #7
 80423da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80423de:	681b      	ldr	r3, [r3, #0]
 80423e0:	4422      	add	r2, r4
 80423e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80423e4:	e105      	b.n	80425f2 <UART_SetConfig+0x4d6>
 80423e6:	bf00      	nop
 80423e8:	40011000 	.word	0x40011000
 80423ec:	40011400 	.word	0x40011400
 80423f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80423f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80423f8:	2200      	movs	r2, #0
 80423fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80423fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8042402:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8042406:	4642      	mov	r2, r8
 8042408:	464b      	mov	r3, r9
 804240a:	1891      	adds	r1, r2, r2
 804240c:	6239      	str	r1, [r7, #32]
 804240e:	415b      	adcs	r3, r3
 8042410:	627b      	str	r3, [r7, #36]	; 0x24
 8042412:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8042416:	4641      	mov	r1, r8
 8042418:	1854      	adds	r4, r2, r1
 804241a:	4649      	mov	r1, r9
 804241c:	eb43 0501 	adc.w	r5, r3, r1
 8042420:	f04f 0200 	mov.w	r2, #0
 8042424:	f04f 0300 	mov.w	r3, #0
 8042428:	00eb      	lsls	r3, r5, #3
 804242a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 804242e:	00e2      	lsls	r2, r4, #3
 8042430:	4614      	mov	r4, r2
 8042432:	461d      	mov	r5, r3
 8042434:	4643      	mov	r3, r8
 8042436:	18e3      	adds	r3, r4, r3
 8042438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 804243c:	464b      	mov	r3, r9
 804243e:	eb45 0303 	adc.w	r3, r5, r3
 8042442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8042446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804244a:	685b      	ldr	r3, [r3, #4]
 804244c:	2200      	movs	r2, #0
 804244e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8042452:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8042456:	f04f 0200 	mov.w	r2, #0
 804245a:	f04f 0300 	mov.w	r3, #0
 804245e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8042462:	4629      	mov	r1, r5
 8042464:	008b      	lsls	r3, r1, #2
 8042466:	4621      	mov	r1, r4
 8042468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 804246c:	4621      	mov	r1, r4
 804246e:	008a      	lsls	r2, r1, #2
 8042470:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8042474:	f7fd fec6 	bl	8040204 <__aeabi_uldivmod>
 8042478:	4602      	mov	r2, r0
 804247a:	460b      	mov	r3, r1
 804247c:	4b60      	ldr	r3, [pc, #384]	; (8042600 <UART_SetConfig+0x4e4>)
 804247e:	fba3 2302 	umull	r2, r3, r3, r2
 8042482:	095b      	lsrs	r3, r3, #5
 8042484:	011c      	lsls	r4, r3, #4
 8042486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 804248a:	2200      	movs	r2, #0
 804248c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8042490:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8042494:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8042498:	4642      	mov	r2, r8
 804249a:	464b      	mov	r3, r9
 804249c:	1891      	adds	r1, r2, r2
 804249e:	61b9      	str	r1, [r7, #24]
 80424a0:	415b      	adcs	r3, r3
 80424a2:	61fb      	str	r3, [r7, #28]
 80424a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80424a8:	4641      	mov	r1, r8
 80424aa:	1851      	adds	r1, r2, r1
 80424ac:	6139      	str	r1, [r7, #16]
 80424ae:	4649      	mov	r1, r9
 80424b0:	414b      	adcs	r3, r1
 80424b2:	617b      	str	r3, [r7, #20]
 80424b4:	f04f 0200 	mov.w	r2, #0
 80424b8:	f04f 0300 	mov.w	r3, #0
 80424bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80424c0:	4659      	mov	r1, fp
 80424c2:	00cb      	lsls	r3, r1, #3
 80424c4:	4651      	mov	r1, sl
 80424c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80424ca:	4651      	mov	r1, sl
 80424cc:	00ca      	lsls	r2, r1, #3
 80424ce:	4610      	mov	r0, r2
 80424d0:	4619      	mov	r1, r3
 80424d2:	4603      	mov	r3, r0
 80424d4:	4642      	mov	r2, r8
 80424d6:	189b      	adds	r3, r3, r2
 80424d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80424dc:	464b      	mov	r3, r9
 80424de:	460a      	mov	r2, r1
 80424e0:	eb42 0303 	adc.w	r3, r2, r3
 80424e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80424e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80424ec:	685b      	ldr	r3, [r3, #4]
 80424ee:	2200      	movs	r2, #0
 80424f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80424f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80424f4:	f04f 0200 	mov.w	r2, #0
 80424f8:	f04f 0300 	mov.w	r3, #0
 80424fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8042500:	4649      	mov	r1, r9
 8042502:	008b      	lsls	r3, r1, #2
 8042504:	4641      	mov	r1, r8
 8042506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 804250a:	4641      	mov	r1, r8
 804250c:	008a      	lsls	r2, r1, #2
 804250e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8042512:	f7fd fe77 	bl	8040204 <__aeabi_uldivmod>
 8042516:	4602      	mov	r2, r0
 8042518:	460b      	mov	r3, r1
 804251a:	4b39      	ldr	r3, [pc, #228]	; (8042600 <UART_SetConfig+0x4e4>)
 804251c:	fba3 1302 	umull	r1, r3, r3, r2
 8042520:	095b      	lsrs	r3, r3, #5
 8042522:	2164      	movs	r1, #100	; 0x64
 8042524:	fb01 f303 	mul.w	r3, r1, r3
 8042528:	1ad3      	subs	r3, r2, r3
 804252a:	011b      	lsls	r3, r3, #4
 804252c:	3332      	adds	r3, #50	; 0x32
 804252e:	4a34      	ldr	r2, [pc, #208]	; (8042600 <UART_SetConfig+0x4e4>)
 8042530:	fba2 2303 	umull	r2, r3, r2, r3
 8042534:	095b      	lsrs	r3, r3, #5
 8042536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804253a:	441c      	add	r4, r3
 804253c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8042540:	2200      	movs	r2, #0
 8042542:	673b      	str	r3, [r7, #112]	; 0x70
 8042544:	677a      	str	r2, [r7, #116]	; 0x74
 8042546:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 804254a:	4642      	mov	r2, r8
 804254c:	464b      	mov	r3, r9
 804254e:	1891      	adds	r1, r2, r2
 8042550:	60b9      	str	r1, [r7, #8]
 8042552:	415b      	adcs	r3, r3
 8042554:	60fb      	str	r3, [r7, #12]
 8042556:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 804255a:	4641      	mov	r1, r8
 804255c:	1851      	adds	r1, r2, r1
 804255e:	6039      	str	r1, [r7, #0]
 8042560:	4649      	mov	r1, r9
 8042562:	414b      	adcs	r3, r1
 8042564:	607b      	str	r3, [r7, #4]
 8042566:	f04f 0200 	mov.w	r2, #0
 804256a:	f04f 0300 	mov.w	r3, #0
 804256e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8042572:	4659      	mov	r1, fp
 8042574:	00cb      	lsls	r3, r1, #3
 8042576:	4651      	mov	r1, sl
 8042578:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 804257c:	4651      	mov	r1, sl
 804257e:	00ca      	lsls	r2, r1, #3
 8042580:	4610      	mov	r0, r2
 8042582:	4619      	mov	r1, r3
 8042584:	4603      	mov	r3, r0
 8042586:	4642      	mov	r2, r8
 8042588:	189b      	adds	r3, r3, r2
 804258a:	66bb      	str	r3, [r7, #104]	; 0x68
 804258c:	464b      	mov	r3, r9
 804258e:	460a      	mov	r2, r1
 8042590:	eb42 0303 	adc.w	r3, r2, r3
 8042594:	66fb      	str	r3, [r7, #108]	; 0x6c
 8042596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804259a:	685b      	ldr	r3, [r3, #4]
 804259c:	2200      	movs	r2, #0
 804259e:	663b      	str	r3, [r7, #96]	; 0x60
 80425a0:	667a      	str	r2, [r7, #100]	; 0x64
 80425a2:	f04f 0200 	mov.w	r2, #0
 80425a6:	f04f 0300 	mov.w	r3, #0
 80425aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80425ae:	4649      	mov	r1, r9
 80425b0:	008b      	lsls	r3, r1, #2
 80425b2:	4641      	mov	r1, r8
 80425b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80425b8:	4641      	mov	r1, r8
 80425ba:	008a      	lsls	r2, r1, #2
 80425bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80425c0:	f7fd fe20 	bl	8040204 <__aeabi_uldivmod>
 80425c4:	4602      	mov	r2, r0
 80425c6:	460b      	mov	r3, r1
 80425c8:	4b0d      	ldr	r3, [pc, #52]	; (8042600 <UART_SetConfig+0x4e4>)
 80425ca:	fba3 1302 	umull	r1, r3, r3, r2
 80425ce:	095b      	lsrs	r3, r3, #5
 80425d0:	2164      	movs	r1, #100	; 0x64
 80425d2:	fb01 f303 	mul.w	r3, r1, r3
 80425d6:	1ad3      	subs	r3, r2, r3
 80425d8:	011b      	lsls	r3, r3, #4
 80425da:	3332      	adds	r3, #50	; 0x32
 80425dc:	4a08      	ldr	r2, [pc, #32]	; (8042600 <UART_SetConfig+0x4e4>)
 80425de:	fba2 2303 	umull	r2, r3, r2, r3
 80425e2:	095b      	lsrs	r3, r3, #5
 80425e4:	f003 020f 	and.w	r2, r3, #15
 80425e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80425ec:	681b      	ldr	r3, [r3, #0]
 80425ee:	4422      	add	r2, r4
 80425f0:	609a      	str	r2, [r3, #8]
}
 80425f2:	bf00      	nop
 80425f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80425f8:	46bd      	mov	sp, r7
 80425fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80425fe:	bf00      	nop
 8042600:	51eb851f 	.word	0x51eb851f

08042604 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8042604:	b084      	sub	sp, #16
 8042606:	b580      	push	{r7, lr}
 8042608:	b084      	sub	sp, #16
 804260a:	af00      	add	r7, sp, #0
 804260c:	6078      	str	r0, [r7, #4]
 804260e:	f107 001c 	add.w	r0, r7, #28
 8042612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8042616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8042618:	2b01      	cmp	r3, #1
 804261a:	d122      	bne.n	8042662 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 804261c:	687b      	ldr	r3, [r7, #4]
 804261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042620:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8042624:	687b      	ldr	r3, [r7, #4]
 8042626:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8042628:	687b      	ldr	r3, [r7, #4]
 804262a:	68db      	ldr	r3, [r3, #12]
 804262c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8042630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8042634:	687a      	ldr	r2, [r7, #4]
 8042636:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8042638:	687b      	ldr	r3, [r7, #4]
 804263a:	68db      	ldr	r3, [r3, #12]
 804263c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042640:	687b      	ldr	r3, [r7, #4]
 8042642:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8042644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8042646:	2b01      	cmp	r3, #1
 8042648:	d105      	bne.n	8042656 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 804264a:	687b      	ldr	r3, [r7, #4]
 804264c:	68db      	ldr	r3, [r3, #12]
 804264e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8042652:	687b      	ldr	r3, [r7, #4]
 8042654:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8042656:	6878      	ldr	r0, [r7, #4]
 8042658:	f000 fa7c 	bl	8042b54 <USB_CoreReset>
 804265c:	4603      	mov	r3, r0
 804265e:	73fb      	strb	r3, [r7, #15]
 8042660:	e01a      	b.n	8042698 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8042662:	687b      	ldr	r3, [r7, #4]
 8042664:	68db      	ldr	r3, [r3, #12]
 8042666:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 804266a:	687b      	ldr	r3, [r7, #4]
 804266c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 804266e:	6878      	ldr	r0, [r7, #4]
 8042670:	f000 fa70 	bl	8042b54 <USB_CoreReset>
 8042674:	4603      	mov	r3, r0
 8042676:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8042678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804267a:	2b00      	cmp	r3, #0
 804267c:	d106      	bne.n	804268c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 804267e:	687b      	ldr	r3, [r7, #4]
 8042680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042682:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8042686:	687b      	ldr	r3, [r7, #4]
 8042688:	639a      	str	r2, [r3, #56]	; 0x38
 804268a:	e005      	b.n	8042698 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 804268c:	687b      	ldr	r3, [r7, #4]
 804268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042690:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8042694:	687b      	ldr	r3, [r7, #4]
 8042696:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8042698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804269a:	2b01      	cmp	r3, #1
 804269c:	d10b      	bne.n	80426b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 804269e:	687b      	ldr	r3, [r7, #4]
 80426a0:	689b      	ldr	r3, [r3, #8]
 80426a2:	f043 0206 	orr.w	r2, r3, #6
 80426a6:	687b      	ldr	r3, [r7, #4]
 80426a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80426aa:	687b      	ldr	r3, [r7, #4]
 80426ac:	689b      	ldr	r3, [r3, #8]
 80426ae:	f043 0220 	orr.w	r2, r3, #32
 80426b2:	687b      	ldr	r3, [r7, #4]
 80426b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80426b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80426b8:	4618      	mov	r0, r3
 80426ba:	3710      	adds	r7, #16
 80426bc:	46bd      	mov	sp, r7
 80426be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80426c2:	b004      	add	sp, #16
 80426c4:	4770      	bx	lr

080426c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80426c6:	b480      	push	{r7}
 80426c8:	b083      	sub	sp, #12
 80426ca:	af00      	add	r7, sp, #0
 80426cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80426ce:	687b      	ldr	r3, [r7, #4]
 80426d0:	689b      	ldr	r3, [r3, #8]
 80426d2:	f023 0201 	bic.w	r2, r3, #1
 80426d6:	687b      	ldr	r3, [r7, #4]
 80426d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80426da:	2300      	movs	r3, #0
}
 80426dc:	4618      	mov	r0, r3
 80426de:	370c      	adds	r7, #12
 80426e0:	46bd      	mov	sp, r7
 80426e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426e6:	4770      	bx	lr

080426e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80426e8:	b580      	push	{r7, lr}
 80426ea:	b084      	sub	sp, #16
 80426ec:	af00      	add	r7, sp, #0
 80426ee:	6078      	str	r0, [r7, #4]
 80426f0:	460b      	mov	r3, r1
 80426f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80426f4:	2300      	movs	r3, #0
 80426f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80426f8:	687b      	ldr	r3, [r7, #4]
 80426fa:	68db      	ldr	r3, [r3, #12]
 80426fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8042700:	687b      	ldr	r3, [r7, #4]
 8042702:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8042704:	78fb      	ldrb	r3, [r7, #3]
 8042706:	2b01      	cmp	r3, #1
 8042708:	d115      	bne.n	8042736 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 804270a:	687b      	ldr	r3, [r7, #4]
 804270c:	68db      	ldr	r3, [r3, #12]
 804270e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8042712:	687b      	ldr	r3, [r7, #4]
 8042714:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8042716:	2001      	movs	r0, #1
 8042718:	f7fe fa40 	bl	8040b9c <HAL_Delay>
      ms++;
 804271c:	68fb      	ldr	r3, [r7, #12]
 804271e:	3301      	adds	r3, #1
 8042720:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8042722:	6878      	ldr	r0, [r7, #4]
 8042724:	f000 fa08 	bl	8042b38 <USB_GetMode>
 8042728:	4603      	mov	r3, r0
 804272a:	2b01      	cmp	r3, #1
 804272c:	d01e      	beq.n	804276c <USB_SetCurrentMode+0x84>
 804272e:	68fb      	ldr	r3, [r7, #12]
 8042730:	2b31      	cmp	r3, #49	; 0x31
 8042732:	d9f0      	bls.n	8042716 <USB_SetCurrentMode+0x2e>
 8042734:	e01a      	b.n	804276c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8042736:	78fb      	ldrb	r3, [r7, #3]
 8042738:	2b00      	cmp	r3, #0
 804273a:	d115      	bne.n	8042768 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 804273c:	687b      	ldr	r3, [r7, #4]
 804273e:	68db      	ldr	r3, [r3, #12]
 8042740:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8042744:	687b      	ldr	r3, [r7, #4]
 8042746:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8042748:	2001      	movs	r0, #1
 804274a:	f7fe fa27 	bl	8040b9c <HAL_Delay>
      ms++;
 804274e:	68fb      	ldr	r3, [r7, #12]
 8042750:	3301      	adds	r3, #1
 8042752:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8042754:	6878      	ldr	r0, [r7, #4]
 8042756:	f000 f9ef 	bl	8042b38 <USB_GetMode>
 804275a:	4603      	mov	r3, r0
 804275c:	2b00      	cmp	r3, #0
 804275e:	d005      	beq.n	804276c <USB_SetCurrentMode+0x84>
 8042760:	68fb      	ldr	r3, [r7, #12]
 8042762:	2b31      	cmp	r3, #49	; 0x31
 8042764:	d9f0      	bls.n	8042748 <USB_SetCurrentMode+0x60>
 8042766:	e001      	b.n	804276c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8042768:	2301      	movs	r3, #1
 804276a:	e005      	b.n	8042778 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 804276c:	68fb      	ldr	r3, [r7, #12]
 804276e:	2b32      	cmp	r3, #50	; 0x32
 8042770:	d101      	bne.n	8042776 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8042772:	2301      	movs	r3, #1
 8042774:	e000      	b.n	8042778 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8042776:	2300      	movs	r3, #0
}
 8042778:	4618      	mov	r0, r3
 804277a:	3710      	adds	r7, #16
 804277c:	46bd      	mov	sp, r7
 804277e:	bd80      	pop	{r7, pc}

08042780 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8042780:	b084      	sub	sp, #16
 8042782:	b580      	push	{r7, lr}
 8042784:	b086      	sub	sp, #24
 8042786:	af00      	add	r7, sp, #0
 8042788:	6078      	str	r0, [r7, #4]
 804278a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 804278e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8042792:	2300      	movs	r3, #0
 8042794:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042796:	687b      	ldr	r3, [r7, #4]
 8042798:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 804279a:	2300      	movs	r3, #0
 804279c:	613b      	str	r3, [r7, #16]
 804279e:	e009      	b.n	80427b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80427a0:	687a      	ldr	r2, [r7, #4]
 80427a2:	693b      	ldr	r3, [r7, #16]
 80427a4:	3340      	adds	r3, #64	; 0x40
 80427a6:	009b      	lsls	r3, r3, #2
 80427a8:	4413      	add	r3, r2
 80427aa:	2200      	movs	r2, #0
 80427ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80427ae:	693b      	ldr	r3, [r7, #16]
 80427b0:	3301      	adds	r3, #1
 80427b2:	613b      	str	r3, [r7, #16]
 80427b4:	693b      	ldr	r3, [r7, #16]
 80427b6:	2b0e      	cmp	r3, #14
 80427b8:	d9f2      	bls.n	80427a0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80427ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80427bc:	2b00      	cmp	r3, #0
 80427be:	d11c      	bne.n	80427fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80427c0:	68fb      	ldr	r3, [r7, #12]
 80427c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80427c6:	685b      	ldr	r3, [r3, #4]
 80427c8:	68fa      	ldr	r2, [r7, #12]
 80427ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80427ce:	f043 0302 	orr.w	r3, r3, #2
 80427d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80427d4:	687b      	ldr	r3, [r7, #4]
 80427d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80427d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80427dc:	687b      	ldr	r3, [r7, #4]
 80427de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80427e0:	687b      	ldr	r3, [r7, #4]
 80427e2:	681b      	ldr	r3, [r3, #0]
 80427e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80427e8:	687b      	ldr	r3, [r7, #4]
 80427ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80427ec:	687b      	ldr	r3, [r7, #4]
 80427ee:	681b      	ldr	r3, [r3, #0]
 80427f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80427f4:	687b      	ldr	r3, [r7, #4]
 80427f6:	601a      	str	r2, [r3, #0]
 80427f8:	e005      	b.n	8042806 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80427fa:	687b      	ldr	r3, [r7, #4]
 80427fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80427fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8042802:	687b      	ldr	r3, [r7, #4]
 8042804:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8042806:	68fb      	ldr	r3, [r7, #12]
 8042808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 804280c:	461a      	mov	r2, r3
 804280e:	2300      	movs	r3, #0
 8042810:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8042812:	68fb      	ldr	r3, [r7, #12]
 8042814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8042818:	4619      	mov	r1, r3
 804281a:	68fb      	ldr	r3, [r7, #12]
 804281c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8042820:	461a      	mov	r2, r3
 8042822:	680b      	ldr	r3, [r1, #0]
 8042824:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8042826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8042828:	2b01      	cmp	r3, #1
 804282a:	d10c      	bne.n	8042846 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 804282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804282e:	2b00      	cmp	r3, #0
 8042830:	d104      	bne.n	804283c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8042832:	2100      	movs	r1, #0
 8042834:	6878      	ldr	r0, [r7, #4]
 8042836:	f000 f945 	bl	8042ac4 <USB_SetDevSpeed>
 804283a:	e008      	b.n	804284e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 804283c:	2101      	movs	r1, #1
 804283e:	6878      	ldr	r0, [r7, #4]
 8042840:	f000 f940 	bl	8042ac4 <USB_SetDevSpeed>
 8042844:	e003      	b.n	804284e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8042846:	2103      	movs	r1, #3
 8042848:	6878      	ldr	r0, [r7, #4]
 804284a:	f000 f93b 	bl	8042ac4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 804284e:	2110      	movs	r1, #16
 8042850:	6878      	ldr	r0, [r7, #4]
 8042852:	f000 f8f3 	bl	8042a3c <USB_FlushTxFifo>
 8042856:	4603      	mov	r3, r0
 8042858:	2b00      	cmp	r3, #0
 804285a:	d001      	beq.n	8042860 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 804285c:	2301      	movs	r3, #1
 804285e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8042860:	6878      	ldr	r0, [r7, #4]
 8042862:	f000 f90f 	bl	8042a84 <USB_FlushRxFifo>
 8042866:	4603      	mov	r3, r0
 8042868:	2b00      	cmp	r3, #0
 804286a:	d001      	beq.n	8042870 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 804286c:	2301      	movs	r3, #1
 804286e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8042870:	68fb      	ldr	r3, [r7, #12]
 8042872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8042876:	461a      	mov	r2, r3
 8042878:	2300      	movs	r3, #0
 804287a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 804287c:	68fb      	ldr	r3, [r7, #12]
 804287e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8042882:	461a      	mov	r2, r3
 8042884:	2300      	movs	r3, #0
 8042886:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8042888:	68fb      	ldr	r3, [r7, #12]
 804288a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 804288e:	461a      	mov	r2, r3
 8042890:	2300      	movs	r3, #0
 8042892:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8042894:	2300      	movs	r3, #0
 8042896:	613b      	str	r3, [r7, #16]
 8042898:	e043      	b.n	8042922 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 804289a:	693b      	ldr	r3, [r7, #16]
 804289c:	015a      	lsls	r2, r3, #5
 804289e:	68fb      	ldr	r3, [r7, #12]
 80428a0:	4413      	add	r3, r2
 80428a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80428a6:	681b      	ldr	r3, [r3, #0]
 80428a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80428ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80428b0:	d118      	bne.n	80428e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80428b2:	693b      	ldr	r3, [r7, #16]
 80428b4:	2b00      	cmp	r3, #0
 80428b6:	d10a      	bne.n	80428ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80428b8:	693b      	ldr	r3, [r7, #16]
 80428ba:	015a      	lsls	r2, r3, #5
 80428bc:	68fb      	ldr	r3, [r7, #12]
 80428be:	4413      	add	r3, r2
 80428c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80428c4:	461a      	mov	r2, r3
 80428c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80428ca:	6013      	str	r3, [r2, #0]
 80428cc:	e013      	b.n	80428f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80428ce:	693b      	ldr	r3, [r7, #16]
 80428d0:	015a      	lsls	r2, r3, #5
 80428d2:	68fb      	ldr	r3, [r7, #12]
 80428d4:	4413      	add	r3, r2
 80428d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80428da:	461a      	mov	r2, r3
 80428dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80428e0:	6013      	str	r3, [r2, #0]
 80428e2:	e008      	b.n	80428f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80428e4:	693b      	ldr	r3, [r7, #16]
 80428e6:	015a      	lsls	r2, r3, #5
 80428e8:	68fb      	ldr	r3, [r7, #12]
 80428ea:	4413      	add	r3, r2
 80428ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80428f0:	461a      	mov	r2, r3
 80428f2:	2300      	movs	r3, #0
 80428f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80428f6:	693b      	ldr	r3, [r7, #16]
 80428f8:	015a      	lsls	r2, r3, #5
 80428fa:	68fb      	ldr	r3, [r7, #12]
 80428fc:	4413      	add	r3, r2
 80428fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8042902:	461a      	mov	r2, r3
 8042904:	2300      	movs	r3, #0
 8042906:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8042908:	693b      	ldr	r3, [r7, #16]
 804290a:	015a      	lsls	r2, r3, #5
 804290c:	68fb      	ldr	r3, [r7, #12]
 804290e:	4413      	add	r3, r2
 8042910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8042914:	461a      	mov	r2, r3
 8042916:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 804291a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 804291c:	693b      	ldr	r3, [r7, #16]
 804291e:	3301      	adds	r3, #1
 8042920:	613b      	str	r3, [r7, #16]
 8042922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042924:	693a      	ldr	r2, [r7, #16]
 8042926:	429a      	cmp	r2, r3
 8042928:	d3b7      	bcc.n	804289a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 804292a:	2300      	movs	r3, #0
 804292c:	613b      	str	r3, [r7, #16]
 804292e:	e043      	b.n	80429b8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8042930:	693b      	ldr	r3, [r7, #16]
 8042932:	015a      	lsls	r2, r3, #5
 8042934:	68fb      	ldr	r3, [r7, #12]
 8042936:	4413      	add	r3, r2
 8042938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804293c:	681b      	ldr	r3, [r3, #0]
 804293e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8042942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8042946:	d118      	bne.n	804297a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8042948:	693b      	ldr	r3, [r7, #16]
 804294a:	2b00      	cmp	r3, #0
 804294c:	d10a      	bne.n	8042964 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 804294e:	693b      	ldr	r3, [r7, #16]
 8042950:	015a      	lsls	r2, r3, #5
 8042952:	68fb      	ldr	r3, [r7, #12]
 8042954:	4413      	add	r3, r2
 8042956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804295a:	461a      	mov	r2, r3
 804295c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8042960:	6013      	str	r3, [r2, #0]
 8042962:	e013      	b.n	804298c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8042964:	693b      	ldr	r3, [r7, #16]
 8042966:	015a      	lsls	r2, r3, #5
 8042968:	68fb      	ldr	r3, [r7, #12]
 804296a:	4413      	add	r3, r2
 804296c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8042970:	461a      	mov	r2, r3
 8042972:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8042976:	6013      	str	r3, [r2, #0]
 8042978:	e008      	b.n	804298c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 804297a:	693b      	ldr	r3, [r7, #16]
 804297c:	015a      	lsls	r2, r3, #5
 804297e:	68fb      	ldr	r3, [r7, #12]
 8042980:	4413      	add	r3, r2
 8042982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8042986:	461a      	mov	r2, r3
 8042988:	2300      	movs	r3, #0
 804298a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 804298c:	693b      	ldr	r3, [r7, #16]
 804298e:	015a      	lsls	r2, r3, #5
 8042990:	68fb      	ldr	r3, [r7, #12]
 8042992:	4413      	add	r3, r2
 8042994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8042998:	461a      	mov	r2, r3
 804299a:	2300      	movs	r3, #0
 804299c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 804299e:	693b      	ldr	r3, [r7, #16]
 80429a0:	015a      	lsls	r2, r3, #5
 80429a2:	68fb      	ldr	r3, [r7, #12]
 80429a4:	4413      	add	r3, r2
 80429a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80429aa:	461a      	mov	r2, r3
 80429ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80429b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80429b2:	693b      	ldr	r3, [r7, #16]
 80429b4:	3301      	adds	r3, #1
 80429b6:	613b      	str	r3, [r7, #16]
 80429b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80429ba:	693a      	ldr	r2, [r7, #16]
 80429bc:	429a      	cmp	r2, r3
 80429be:	d3b7      	bcc.n	8042930 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80429c0:	68fb      	ldr	r3, [r7, #12]
 80429c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80429c6:	691b      	ldr	r3, [r3, #16]
 80429c8:	68fa      	ldr	r2, [r7, #12]
 80429ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80429ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80429d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80429d4:	687b      	ldr	r3, [r7, #4]
 80429d6:	2200      	movs	r2, #0
 80429d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80429da:	687b      	ldr	r3, [r7, #4]
 80429dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80429e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80429e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80429e4:	2b00      	cmp	r3, #0
 80429e6:	d105      	bne.n	80429f4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80429e8:	687b      	ldr	r3, [r7, #4]
 80429ea:	699b      	ldr	r3, [r3, #24]
 80429ec:	f043 0210 	orr.w	r2, r3, #16
 80429f0:	687b      	ldr	r3, [r7, #4]
 80429f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80429f4:	687b      	ldr	r3, [r7, #4]
 80429f6:	699a      	ldr	r2, [r3, #24]
 80429f8:	4b0f      	ldr	r3, [pc, #60]	; (8042a38 <USB_DevInit+0x2b8>)
 80429fa:	4313      	orrs	r3, r2
 80429fc:	687a      	ldr	r2, [r7, #4]
 80429fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8042a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8042a02:	2b00      	cmp	r3, #0
 8042a04:	d005      	beq.n	8042a12 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8042a06:	687b      	ldr	r3, [r7, #4]
 8042a08:	699b      	ldr	r3, [r3, #24]
 8042a0a:	f043 0208 	orr.w	r2, r3, #8
 8042a0e:	687b      	ldr	r3, [r7, #4]
 8042a10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8042a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8042a14:	2b01      	cmp	r3, #1
 8042a16:	d107      	bne.n	8042a28 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8042a18:	687b      	ldr	r3, [r7, #4]
 8042a1a:	699b      	ldr	r3, [r3, #24]
 8042a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8042a20:	f043 0304 	orr.w	r3, r3, #4
 8042a24:	687a      	ldr	r2, [r7, #4]
 8042a26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8042a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8042a2a:	4618      	mov	r0, r3
 8042a2c:	3718      	adds	r7, #24
 8042a2e:	46bd      	mov	sp, r7
 8042a30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8042a34:	b004      	add	sp, #16
 8042a36:	4770      	bx	lr
 8042a38:	803c3800 	.word	0x803c3800

08042a3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8042a3c:	b480      	push	{r7}
 8042a3e:	b085      	sub	sp, #20
 8042a40:	af00      	add	r7, sp, #0
 8042a42:	6078      	str	r0, [r7, #4]
 8042a44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8042a46:	2300      	movs	r3, #0
 8042a48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8042a4a:	683b      	ldr	r3, [r7, #0]
 8042a4c:	019b      	lsls	r3, r3, #6
 8042a4e:	f043 0220 	orr.w	r2, r3, #32
 8042a52:	687b      	ldr	r3, [r7, #4]
 8042a54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8042a56:	68fb      	ldr	r3, [r7, #12]
 8042a58:	3301      	adds	r3, #1
 8042a5a:	60fb      	str	r3, [r7, #12]
 8042a5c:	4a08      	ldr	r2, [pc, #32]	; (8042a80 <USB_FlushTxFifo+0x44>)
 8042a5e:	4293      	cmp	r3, r2
 8042a60:	d901      	bls.n	8042a66 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8042a62:	2303      	movs	r3, #3
 8042a64:	e006      	b.n	8042a74 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8042a66:	687b      	ldr	r3, [r7, #4]
 8042a68:	691b      	ldr	r3, [r3, #16]
 8042a6a:	f003 0320 	and.w	r3, r3, #32
 8042a6e:	2b20      	cmp	r3, #32
 8042a70:	d0f1      	beq.n	8042a56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8042a72:	2300      	movs	r3, #0
}
 8042a74:	4618      	mov	r0, r3
 8042a76:	3714      	adds	r7, #20
 8042a78:	46bd      	mov	sp, r7
 8042a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a7e:	4770      	bx	lr
 8042a80:	00030d40 	.word	0x00030d40

08042a84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8042a84:	b480      	push	{r7}
 8042a86:	b085      	sub	sp, #20
 8042a88:	af00      	add	r7, sp, #0
 8042a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8042a8c:	2300      	movs	r3, #0
 8042a8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8042a90:	687b      	ldr	r3, [r7, #4]
 8042a92:	2210      	movs	r2, #16
 8042a94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8042a96:	68fb      	ldr	r3, [r7, #12]
 8042a98:	3301      	adds	r3, #1
 8042a9a:	60fb      	str	r3, [r7, #12]
 8042a9c:	4a08      	ldr	r2, [pc, #32]	; (8042ac0 <USB_FlushRxFifo+0x3c>)
 8042a9e:	4293      	cmp	r3, r2
 8042aa0:	d901      	bls.n	8042aa6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8042aa2:	2303      	movs	r3, #3
 8042aa4:	e006      	b.n	8042ab4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8042aa6:	687b      	ldr	r3, [r7, #4]
 8042aa8:	691b      	ldr	r3, [r3, #16]
 8042aaa:	f003 0310 	and.w	r3, r3, #16
 8042aae:	2b10      	cmp	r3, #16
 8042ab0:	d0f1      	beq.n	8042a96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8042ab2:	2300      	movs	r3, #0
}
 8042ab4:	4618      	mov	r0, r3
 8042ab6:	3714      	adds	r7, #20
 8042ab8:	46bd      	mov	sp, r7
 8042aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042abe:	4770      	bx	lr
 8042ac0:	00030d40 	.word	0x00030d40

08042ac4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8042ac4:	b480      	push	{r7}
 8042ac6:	b085      	sub	sp, #20
 8042ac8:	af00      	add	r7, sp, #0
 8042aca:	6078      	str	r0, [r7, #4]
 8042acc:	460b      	mov	r3, r1
 8042ace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042ad0:	687b      	ldr	r3, [r7, #4]
 8042ad2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8042ad4:	68fb      	ldr	r3, [r7, #12]
 8042ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8042ada:	681a      	ldr	r2, [r3, #0]
 8042adc:	78fb      	ldrb	r3, [r7, #3]
 8042ade:	68f9      	ldr	r1, [r7, #12]
 8042ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8042ae4:	4313      	orrs	r3, r2
 8042ae6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8042ae8:	2300      	movs	r3, #0
}
 8042aea:	4618      	mov	r0, r3
 8042aec:	3714      	adds	r7, #20
 8042aee:	46bd      	mov	sp, r7
 8042af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042af4:	4770      	bx	lr

08042af6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8042af6:	b480      	push	{r7}
 8042af8:	b085      	sub	sp, #20
 8042afa:	af00      	add	r7, sp, #0
 8042afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042afe:	687b      	ldr	r3, [r7, #4]
 8042b00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8042b02:	68fb      	ldr	r3, [r7, #12]
 8042b04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8042b08:	681b      	ldr	r3, [r3, #0]
 8042b0a:	68fa      	ldr	r2, [r7, #12]
 8042b0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8042b10:	f023 0303 	bic.w	r3, r3, #3
 8042b14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8042b16:	68fb      	ldr	r3, [r7, #12]
 8042b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8042b1c:	685b      	ldr	r3, [r3, #4]
 8042b1e:	68fa      	ldr	r2, [r7, #12]
 8042b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8042b24:	f043 0302 	orr.w	r3, r3, #2
 8042b28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8042b2a:	2300      	movs	r3, #0
}
 8042b2c:	4618      	mov	r0, r3
 8042b2e:	3714      	adds	r7, #20
 8042b30:	46bd      	mov	sp, r7
 8042b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b36:	4770      	bx	lr

08042b38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8042b38:	b480      	push	{r7}
 8042b3a:	b083      	sub	sp, #12
 8042b3c:	af00      	add	r7, sp, #0
 8042b3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8042b40:	687b      	ldr	r3, [r7, #4]
 8042b42:	695b      	ldr	r3, [r3, #20]
 8042b44:	f003 0301 	and.w	r3, r3, #1
}
 8042b48:	4618      	mov	r0, r3
 8042b4a:	370c      	adds	r7, #12
 8042b4c:	46bd      	mov	sp, r7
 8042b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b52:	4770      	bx	lr

08042b54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8042b54:	b480      	push	{r7}
 8042b56:	b085      	sub	sp, #20
 8042b58:	af00      	add	r7, sp, #0
 8042b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8042b5c:	2300      	movs	r3, #0
 8042b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8042b60:	68fb      	ldr	r3, [r7, #12]
 8042b62:	3301      	adds	r3, #1
 8042b64:	60fb      	str	r3, [r7, #12]
 8042b66:	4a13      	ldr	r2, [pc, #76]	; (8042bb4 <USB_CoreReset+0x60>)
 8042b68:	4293      	cmp	r3, r2
 8042b6a:	d901      	bls.n	8042b70 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8042b6c:	2303      	movs	r3, #3
 8042b6e:	e01a      	b.n	8042ba6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8042b70:	687b      	ldr	r3, [r7, #4]
 8042b72:	691b      	ldr	r3, [r3, #16]
 8042b74:	2b00      	cmp	r3, #0
 8042b76:	daf3      	bge.n	8042b60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8042b78:	2300      	movs	r3, #0
 8042b7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8042b7c:	687b      	ldr	r3, [r7, #4]
 8042b7e:	691b      	ldr	r3, [r3, #16]
 8042b80:	f043 0201 	orr.w	r2, r3, #1
 8042b84:	687b      	ldr	r3, [r7, #4]
 8042b86:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8042b88:	68fb      	ldr	r3, [r7, #12]
 8042b8a:	3301      	adds	r3, #1
 8042b8c:	60fb      	str	r3, [r7, #12]
 8042b8e:	4a09      	ldr	r2, [pc, #36]	; (8042bb4 <USB_CoreReset+0x60>)
 8042b90:	4293      	cmp	r3, r2
 8042b92:	d901      	bls.n	8042b98 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8042b94:	2303      	movs	r3, #3
 8042b96:	e006      	b.n	8042ba6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8042b98:	687b      	ldr	r3, [r7, #4]
 8042b9a:	691b      	ldr	r3, [r3, #16]
 8042b9c:	f003 0301 	and.w	r3, r3, #1
 8042ba0:	2b01      	cmp	r3, #1
 8042ba2:	d0f1      	beq.n	8042b88 <USB_CoreReset+0x34>

  return HAL_OK;
 8042ba4:	2300      	movs	r3, #0
}
 8042ba6:	4618      	mov	r0, r3
 8042ba8:	3714      	adds	r7, #20
 8042baa:	46bd      	mov	sp, r7
 8042bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042bb0:	4770      	bx	lr
 8042bb2:	bf00      	nop
 8042bb4:	00030d40 	.word	0x00030d40

08042bb8 <__libc_init_array>:
 8042bb8:	b570      	push	{r4, r5, r6, lr}
 8042bba:	4d0d      	ldr	r5, [pc, #52]	; (8042bf0 <__libc_init_array+0x38>)
 8042bbc:	4c0d      	ldr	r4, [pc, #52]	; (8042bf4 <__libc_init_array+0x3c>)
 8042bbe:	1b64      	subs	r4, r4, r5
 8042bc0:	10a4      	asrs	r4, r4, #2
 8042bc2:	2600      	movs	r6, #0
 8042bc4:	42a6      	cmp	r6, r4
 8042bc6:	d109      	bne.n	8042bdc <__libc_init_array+0x24>
 8042bc8:	4d0b      	ldr	r5, [pc, #44]	; (8042bf8 <__libc_init_array+0x40>)
 8042bca:	4c0c      	ldr	r4, [pc, #48]	; (8042bfc <__libc_init_array+0x44>)
 8042bcc:	f000 f820 	bl	8042c10 <_init>
 8042bd0:	1b64      	subs	r4, r4, r5
 8042bd2:	10a4      	asrs	r4, r4, #2
 8042bd4:	2600      	movs	r6, #0
 8042bd6:	42a6      	cmp	r6, r4
 8042bd8:	d105      	bne.n	8042be6 <__libc_init_array+0x2e>
 8042bda:	bd70      	pop	{r4, r5, r6, pc}
 8042bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8042be0:	4798      	blx	r3
 8042be2:	3601      	adds	r6, #1
 8042be4:	e7ee      	b.n	8042bc4 <__libc_init_array+0xc>
 8042be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8042bea:	4798      	blx	r3
 8042bec:	3601      	adds	r6, #1
 8042bee:	e7f2      	b.n	8042bd6 <__libc_init_array+0x1e>
 8042bf0:	08042c48 	.word	0x08042c48
 8042bf4:	08042c48 	.word	0x08042c48
 8042bf8:	08042c48 	.word	0x08042c48
 8042bfc:	08042c4c 	.word	0x08042c4c

08042c00 <memset>:
 8042c00:	4402      	add	r2, r0
 8042c02:	4603      	mov	r3, r0
 8042c04:	4293      	cmp	r3, r2
 8042c06:	d100      	bne.n	8042c0a <memset+0xa>
 8042c08:	4770      	bx	lr
 8042c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8042c0e:	e7f9      	b.n	8042c04 <memset+0x4>

08042c10 <_init>:
 8042c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042c12:	bf00      	nop
 8042c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042c16:	bc08      	pop	{r3}
 8042c18:	469e      	mov	lr, r3
 8042c1a:	4770      	bx	lr

08042c1c <_fini>:
 8042c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042c1e:	bf00      	nop
 8042c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042c22:	bc08      	pop	{r3}
 8042c24:	469e      	mov	lr, r3
 8042c26:	4770      	bx	lr
